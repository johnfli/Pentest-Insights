package com.business.starter.backend.entities;

import com.business.starter.backend.entities.scanResults.ScanResults;
import com.business.starter.backend.entities.scanResults.testNg.TestNgResults;
import com.business.starter.backend.entities.scanResults.zap.ZapResults;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.*;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

@Entity
@Table(name = "scans")
public class Scan extends AbstractEntity {

    public enum BrowserType {
        Chrome, Firefox // , Safari, Edge, IE
    }

    public enum BrowserMode {
        ON, OFF
    }

    public enum Status {
        PENDING ("Pending"),
        RUNNING ("Running"),
        FINISHED("Finished"),
        ABORTED ("Aborted");

        private String name;

        Status(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

    private static final List<String> availableZapOptions =
            Arrays.asList(
                    "Crawling",
                    "AJAX Spidering",
                    "Passive Scanning",
                    "Active Scanning"
    );

    @Column(name = "java_file_path")
    private String javaFilePath = "";
    @Column(name = "java_file_name")
    private String javaFileName = "";
    @Column(name = "browser_type")
    @Enumerated(EnumType.STRING)
    private BrowserType browserType;
    @Column(name = "browser_mode")
    @Enumerated(EnumType.STRING)
    private BrowserMode headlessMode = BrowserMode.valueOf("OFF");
    @Column(name = "zap_options")
    private String zapOptions;
    @Column(name = "scan_status")
    @Enumerated(EnumType.STRING)
    private Status status;
    @Column(name = "creation_date_time")
    private LocalDateTime creationDateTime;
    @Column(name = "user_id")
    private Long userId;

    public Scan() {  }

    public Scan(String javaFilePath, String javaFileName, BrowserType browserType,
                BrowserMode headlessMode, String zapOptions, Long userId) {

        this.javaFilePath = javaFilePath;
        this.javaFileName = javaFileName;
        this.browserType = browserType;
        this.headlessMode = headlessMode;
        this.zapOptions = zapOptions;
        this.status = Status.PENDING;
        this.creationDateTime = LocalDateTime.now();
        this.userId = userId;
    }

    public String getJavaFilePath() { return javaFilePath; }

    public void setJavaFilePath(String javaFilePath) { this.javaFilePath = javaFilePath; }

    public static List<String> getAvailableZapOptions() { return availableZapOptions; }

    public String getJavaFileName() { return javaFileName; }

    public void setJavaFileName(String javaFileName) { this.javaFileName = javaFileName; }

    public BrowserType getBrowserType() { return browserType; }

    public void setBrowserType(BrowserType browserType) { this.browserType = browserType; }

    public BrowserMode getHeadlessMode() { return headlessMode; }

    public void setHeadlessMode(BrowserMode headlessMode) { this.headlessMode = headlessMode; }

    public String getZapOptions() { return zapOptions; }

    public void setZapOptions(String zapOptions) { this.zapOptions = zapOptions; }

    public LocalDateTime getCreationDateTime() { return creationDateTime; }

    public void setCreationDateTime(LocalDateTime creationDateTime) { this.creationDateTime = creationDateTime; }

    public Long getUserId() { return userId; }

    public void setUserId(Long userId) { this.userId = userId; }

    public Status getStatus() { return status; }

    public void setStatus(Status status) { this.status = status; }

    public boolean isFinished() { return getStatus().equals(Scan.Status.FINISHED); }

    // This method (getScanResults) should only be called after the Scan process
    // has finished, so that the files exist in the equivalent folder
    /***     Scan Results Folder: scr/main/resources/javaFiles/<UserId>/<ScanId>/reports    ***/
    public ScanResults getScanResults() throws JAXBException, IOException {
        String targetFilePath = javaFilePath + "reports";
        // Unmarshall the ZAP results from the JSON file
        ZapResults zapResults = jsonUnmarshall(targetFilePath + "/ZapReport.json");
        // Unmarshall the TestNG results from the XML file
        TestNgResults testngResults = xmlUnmarshall(targetFilePath + "/testng-results.xml");
        return new ScanResults(testngResults, zapResults);
    }

    public ZapResults jsonUnmarshall(String file) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        // Read JSON file and convert to a ZapResult object
        return objectMapper.readValue(
                new File(file),
                ZapResults.class);
    }

    public TestNgResults xmlUnmarshall(String file) throws JAXBException, IOException {
        JAXBContext context = JAXBContext.newInstance(TestNgResults.class);
        return (TestNgResults) context.createUnmarshaller()
                .unmarshal(new FileReader(file));
    }

    @Override
    public String toString() {
        return  "Scan: {" +
                " File Path: " +javaFilePath +
                ", File Name: " + javaFileName +
                ", Browser Type: " + browserType +
                ", Browser Mode: " + headlessMode +
                ", Zap Options: " + zapOptions +
                ", Status: " + status.toString() +
                ", Creation Date: " + creationDateTime.toString() +
                ", UserId: " + userId.toString() +
                " }";
    }
}
