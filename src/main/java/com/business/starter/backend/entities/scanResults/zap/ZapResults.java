package com.business.starter.backend.entities.scanResults.zap;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "@version",
    "@generated",
    "site"
})
public class ZapResults {

    @JsonProperty("@version")
    private String version;
    @JsonProperty("@generated")
    private String generated;
    @JsonProperty("site")
    private List<Site> site = null;

    @JsonProperty("@version")
    public String getVersion() {
        return version;
    }

    @JsonProperty("@version")
    public void setVersion(String version) {
        this.version = version;
    }

    @JsonProperty("@generated")
    public String getGenerated() {
        return generated;
    }

    @JsonProperty("@generated")
    public void setGenerated(String generated) {
        this.generated = generated;
    }

    @JsonProperty("site")
    public List<Site> getSite() {
        return site;
    }

    @JsonProperty("site")
    public void setSite(List<Site> site) {
        this.site = site;
    }

    public List<Alert> getCommonAlerts(ZapResults otherZapResults) {
        List<Alert> alerts = site.get(0).getAlerts();
        List<Alert> otherAlerts = otherZapResults.getSite().get(0).getAlerts();
        List<Alert> commonAlerts = new ArrayList<>();

        for (Alert alert:alerts)
            for (Alert otherAlert:otherAlerts)
                if (alert.getName().equals(otherAlert.getName()))
                    commonAlerts.add(alert);
        return commonAlerts;
    }

    public int[] getZapAlertsCount() {
        List<Alert> alerts = site.get(0).getAlerts();
        int total = alerts.size();
        int high = 0, medium = 0, low = 0, info = 0;
        for (Alert alert:alerts) {
            if (alert.getRiskcode().equalsIgnoreCase("3"))
                high++;
            if (alert.getRiskcode().equalsIgnoreCase("2"))
                medium++;
            if (alert.getRiskcode().equalsIgnoreCase("1"))
                low++;
            if (alert.getRiskcode().equalsIgnoreCase("0"))
                info++;
        }
        return new int[]{total, high, medium, low, info};
    }

    @Override
    public String toString() {
        return "{" +
        " version: " + version +
        ", generated: " + generated +
        ", site: " + site.toString() +
        " }";
    }
}
