package com.business.starter.backend.services;

import com.business.starter.backend.entities.User;
import com.business.starter.backend.entities.UserDto;
import com.business.starter.backend.repositories.UserRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class UserService {
    private static final Logger LOGGER = Logger.getLogger(UserService.class.getName());

    private UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public List<User> findAll() {
        return userRepository.findAll();
    }

    public List<User> findAll(String filter) {
            if(filter == null || filter.isEmpty()) {
                return userRepository.findAll();
            }
            else {
                return userRepository.search(filter);
            }
        }

    public void registerNewUser(UserDto accountDto) {

        if (emailAndUsernameValid(accountDto.getEmail(), accountDto.getUsername())) {
            User user = new User(
                    accountDto.getUsername(),
                    accountDto.getEmail(),
                    accountDto.getFirstName(),
                    accountDto.getLastName(),
                    accountDto.getPassword(),
                    "Role.USER");
            save(user);
        }
    }

    public void updateRegisteredUser(User user, UserDto userDto) {
        if (alterEmailOrUsernameValid(user, userDto.getEmail(), userDto.getUsername())) {
            boolean altered = false;
            if (!userDto.getUsername().isEmpty() && !user.getUsername().equals(userDto.getUsername())) {
                user.setUsername(userDto.getUsername());
                altered =true;
            }
            if (!userDto.getEmail().isEmpty() && !user.getEmail().equals(userDto.getEmail())) {
                user.setEmail(userDto.getEmail());
                altered =true;
            }
            if (!userDto.getFirstName().isEmpty() && !user.getFirstName().equals(userDto.getFirstName())) {
                user.setFirstName(userDto.getFirstName());
                altered =true;
            }
            if (!userDto.getLastName().isEmpty() && !user.getLastName().equals(userDto.getLastName())) {
                user.setLastName(userDto.getLastName());
                altered =true;
            }
            if (!userDto.getPassword().isEmpty() && !user.getPasswordHash().equals(userDto.getPassword())) {
                // Save the hashed password
                user.setPasswordHash(com.business.starter.security.SecurityConfiguration.passwordEncoder().encode(userDto.getPassword()));
                altered =true;
            }
            if (altered)
                update(user);
        }
    }

    public boolean alterEmailOrUsernameValid(User user, String email, String username) {
        boolean emailTakenBySomeoneElse =
                !email.equalsIgnoreCase(user.getEmail()) && emailExists(email);
        boolean usernameTakenBySomeoneElse =
                !username.equalsIgnoreCase(user.getUsername()) && usernameExists(username);
        return  !emailTakenBySomeoneElse && !usernameTakenBySomeoneElse;
    }

    public boolean emailAndUsernameValid(String email, String username) {
        return !emailExists(email) && !usernameExists(username);
    }

    private boolean usernameExists(String username) {
        User user = userRepository.findByUsernameIgnoreCase(username);
        return user != null;
    }

    private boolean emailExists(String email) {
        User user = userRepository.findByEmailIgnoreCase(email);
        return user != null;
    }

    public long count() {
        return userRepository.count();
    }

    public void delete(User user) {
        userRepository.delete(user);
    }

    public void save(User user) {
        if (user == null) {
            LOGGER.log(Level.SEVERE,
                    "This user is null. Are you sure you have connected your form to the application?");
            return;
        }
        // Save the hashed password
        user.setPasswordHash(com.business.starter.security.SecurityConfiguration.passwordEncoder().encode(user.getPasswordHash()));
        user.setRegistrationDate(LocalDate.now());
        userRepository.save(user);
    }

    public void update(User user) {
        if (user == null) {
            LOGGER.log(Level.SEVERE,
                    "This user is null. Are you sure you have connected your form to the application?");
            return;
        }
        userRepository.save(user);
    }

    public User getUserByUsername(String username) {
        return userRepository.findByUsernameIgnoreCase(username);
    }
}
