package com.business.starter.ui.views;

import com.business.starter.backend.entities.User;
import com.business.starter.backend.entities.UserDto;
import com.business.starter.backend.services.UserService;
import com.business.starter.security.SecurityUtils;
import com.business.starter.ui.MainLayout;
import com.business.starter.ui.components.FlexBoxLayout;
import com.business.starter.ui.layout.size.Horizontal;
import com.business.starter.ui.layout.size.Right;
import com.business.starter.ui.layout.size.Uniform;
import com.business.starter.ui.util.AppConst;
import com.business.starter.ui.util.LumoStyles;
import com.business.starter.ui.util.UIUtils;
import com.business.starter.ui.util.css.FlexDirection;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.textfield.PasswordField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.validator.EmailValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;

@Route(value = AppConst.PAGE_SETTINGS, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_SETTINGS + " | " + AppConst.APP_NAME)
public class Settings extends ViewFrame {

    private FormLayout registrationForm;
    private Button saveSettings;
    private final Binder<UserDto> binder = new Binder<>(UserDto.class);
    private final User user;
    private UserDto userDto;
    private TextField email;
    private Checkbox emailUpdates;
    private TextField username;
    private Label infoLabel;

    private final UserService userService;

    public Settings(UserService userService) {
        this.userService = userService;
        user = userService.getUserByUsername(SecurityUtils.getUsername());

        setId(AppConst.PAGE_SETTINGS);
        setViewContent(createContent());
    }

    private Component createContent() {
        TextField firstName = new TextField();
        firstName.setWidthFull();
        firstName.setValueChangeMode(ValueChangeMode.EAGER);
        firstName.setInvalid(true);

        TextField lastName = new TextField();
        lastName.setWidthFull();
        lastName.setValueChangeMode(ValueChangeMode.EAGER);
        lastName.setInvalid(true);

        username = new TextField();
        username.setWidthFull();
        username.setValueChangeMode(ValueChangeMode.EAGER);
        username.setInvalid(true);

        email = new TextField();
        email.setWidthFull();
        email.setValueChangeMode(ValueChangeMode.EAGER);
        email.setInvalid(true);
        emailUpdates = new Checkbox("E-mail me scan results");
        Div emailDiv = new Div();
        emailDiv.add(email, emailUpdates);

        PasswordField password = new PasswordField();
        password.setWidthFull();
        password.setValueChangeMode(ValueChangeMode.EAGER);
        password.setInvalid(true);

        PasswordField matchingPassword = new PasswordField();
        matchingPassword.setWidthFull();
        matchingPassword.setValueChangeMode(ValueChangeMode.EAGER);
        matchingPassword.setInvalid(true);
        // Form layout
        registrationForm = new FormLayout();
        registrationForm.addClassNames(LumoStyles.Padding.Bottom.L,
                LumoStyles.Padding.Horizontal.L, LumoStyles.Padding.Top.S);
        registrationForm.setResponsiveSteps(
                new FormLayout.ResponsiveStep("0", 1,
                        FormLayout.ResponsiveStep.LabelsPosition.TOP),
                new FormLayout.ResponsiveStep("21em", 2,
                        FormLayout.ResponsiveStep.LabelsPosition.TOP));
        registrationForm.addFormItem(firstName, "First Name");
        registrationForm.addFormItem(lastName, "Last Name");
        FormLayout.FormItem emailItem = registrationForm.addFormItem(emailDiv, "Email");
        FormLayout.FormItem usernameItem = registrationForm.addFormItem(username, "Username");
        FormLayout.FormItem passwordItem = registrationForm.addFormItem(password, "New Password");
        FormLayout.FormItem matchingPasswordItem = registrationForm.addFormItem(matchingPassword, "Repeat New Password");
        FormLayout.FormItem buttonsItem = registrationForm.addFormItem(createFormButtons(), createInfoLabel());
        UIUtils.setColSpan(2, emailItem, emailUpdates, usernameItem,
                passwordItem, matchingPasswordItem, buttonsItem);
        // Bind form fields
        binder.forField(firstName)
                .withValidator(new StringLengthValidator(
                        "First Name should consist of 3 or more characters", 3, 256))
                .bind(UserDto::getFirstName, UserDto::setFirstName);
        binder.forField(lastName)
                .withValidator(new StringLengthValidator(
                        "Last Name should consist of 3 or more characters", 3, 256))
                .bind(UserDto::getLastName, UserDto::setLastName);
        binder.forField(email)
                .withValidator(new EmailValidator("Not valid email address"))
                .bind(UserDto::getEmail, UserDto::setEmail);
        binder.forField(username)
                .withValidator(new StringLengthValidator(
                        "Username should consist of 5 or more characters", 5, 30))
                .bind(UserDto::getUsername, UserDto::setUsername);
        binder.forField(password)
                .withValidator(pass -> pass.matches("(^(|(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,})$)?"),
                        "Password should consist of 8 or more chars, mixing digits, lowercase and uppercase letters")
                .bind(UserDto::getPassword, UserDto::setPassword);
        binder.forField(matchingPassword)
                .withValidator(pass -> pass.equals(password.getValue()),
                        "Passwords don't match")
                .bind(UserDto::getPassword, UserDto::setPassword);
        binder.setBean(getUserDto());
        binder.addValueChangeListener(event -> saveSettings.setEnabled(binder.isValid() && isThereAnyChange()));

        FlexBoxLayout content = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.EDIT, "Profile Settings"),
                registrationForm
        );
        content.setFlexDirection(FlexDirection.COLUMN);
        content.setMargin(Horizontal.AUTO);
        content.setMaxWidth("840px");
        content.setPadding(Uniform.RESPONSIVE_L);

        return content;
    }

    private Component createFormButtons() {
        saveSettings = UIUtils.createLargeButton("Save Settings");
        saveSettings.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        saveSettings.setEnabled(false);
        saveSettings.getStyle().set("cursor", "pointer");
        saveSettings.addClickListener(event -> {
            if (userService.alterEmailOrUsernameValid(user, email.getValue(), username.getValue())) {
                userService.updateRegisteredUser(user, userDto);
                infoLabel.setText("");
                UIUtils.showNotification("User Profile updated successfully.", NotificationVariant.LUMO_SUCCESS);
            } else {
                infoLabel.setText("Email or username already exists. " +
                        "Please change try another combination " +
                        "or if you already have an account you can Reset you password.");
            }
        });
        saveSettings.addClickShortcut(Key.ENTER).listenOn(registrationForm);

        Button reset;
        reset = UIUtils.createLargeButton("Reset");
        reset.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        reset.setIcon(VaadinIcon.REFRESH.create());
        reset.getStyle().set("cursor", "pointer");
        reset.addClickListener(event -> {
            binder.setBean(getUserDto());
            infoLabel.setText("");
            emailUpdates.setValue(false);
            saveSettings.setEnabled(false);
        });

        FlexBoxLayout formButtons = new FlexBoxLayout(saveSettings, reset);
        formButtons.setSpacing(Right.S);
        return formButtons;
    }

    private UserDto getUserDto() {
        userDto = new UserDto(
            user.getUsername(),
            user.getEmail(),
            user.getFirstName(),
            user.getLastName()
        );
        return userDto;
    }

    private Component createInfoLabel() {
        infoLabel = new Label();
        infoLabel.getStyle().set("color", "red");
        infoLabel.setText("");
        return infoLabel;
    }

    private boolean isThereAnyChange() {
        boolean isInfoAltered = (
                ((!user.getFirstName().equals(userDto.getFirstName())) ||
                        // is the First Name altered
                (!user.getLastName().equals(userDto.getLastName())) ||
                        // is the Last Name altered
                (!user.getUsername().equals(userDto.getUsername())) ||
                        // is the Username altered
                (!user.getEmail().equals(userDto.getEmail())))
                        // is the Email altered
        );
        boolean isPasswordAltered =
                                (!user.getPasswordHash().equals(
                        com.business.starter.security.SecurityConfiguration.passwordEncoder()
                                .encode(userDto.getPassword())));

        return isInfoAltered || isPasswordAltered;
    }
}
