package com.business.starter.ui.views;

import com.business.starter.backend.entities.Scan;
import com.business.starter.backend.entities.scanResults.ScanResults;
import com.business.starter.backend.entities.scanResults.testNg.TestNgResults;
import com.business.starter.backend.entities.scanResults.zap.ZapResults;
import com.business.starter.backend.services.ScanService;
import com.business.starter.backend.services.UserService;
import com.business.starter.security.SecurityUtils;
import com.business.starter.ui.MainLayout;
import com.business.starter.ui.components.*;
import com.business.starter.ui.components.navigation.bar.AppBar;
import com.business.starter.ui.layout.size.*;
import com.business.starter.ui.util.AppConst;
import com.business.starter.ui.util.ChartUtils;
import com.business.starter.ui.util.LumoStyles;
import com.business.starter.ui.util.UIUtils;
import com.business.starter.ui.util.css.*;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.charts.model.DataSeries;
import com.vaadin.flow.component.charts.model.DataSeriesItem;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.router.BeforeEvent;
import com.vaadin.flow.router.HasUrlParameter;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Route(value = AppConst.PAGE_SCAN_DETAILS, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_SCAN_DETAILS + " | " + AppConst.APP_NAME)
public class ScanDetails extends ViewFrame implements HasUrlParameter<Long> {

    public static final String MAX_WIDTH = "1440px";

    private ListItem appStatus;
    private ListItem javaFileName;
    private ListItem browserType;
    private ListItem browserMode;
    private ListItem zap;
    private ListItem requestTimestamp;
    private ListItem scanStatus;

    private Scan scan;
    private ScanResults scanResults;
    int alertsHighCount = -1;
    int alertsMediumCount = -1;
    int alertsLowCount = -1;
    int alertsInfoCount = -1;

    Scan previousScan;
    private ScanResults previousScanResults;

    private final ScanService scanService;
    private final UserService userService;

    ConfirmDialog deleteDialog;

    public ScanDetails(ScanService scanService, UserService userService) {
        this.scanService = scanService;
        this.userService = userService;
    }

    @Override
    public void setParameter(BeforeEvent beforeEvent, Long id) {
        scan = scanService.findByIdAndUserId(id,
                userService.getUserByUsername(SecurityUtils.getUsername()).getId());
        if (scan.isFinished()) {
            try {
                scanResults = scan.getScanResults();
            } catch (JAXBException e) {
                System.out.println("Current Scan JAXBException : ");
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println("Current Scan IOException : ");
                e.printStackTrace();
            }
        }
        createDeleteDialog();
        setViewContent(createContent());
        getContent().setSizeFull();
    }

    private Component createContent() {
        FlexBoxLayout content = new FlexBoxLayout(
                createScanInfoSection()
        );
        if (scan.isFinished()) {
            content.add(createBoards());
            content.add(createFunctionalGrid());
            content.add(createSecurityGrid());
            content.add(createComparisonSection());
            content.add(createFindingsSection());
        }
        content.add(createDeleteButton());

        content.setFlexDirection(FlexDirection.COLUMN);
        content.setMargin(Horizontal.AUTO, Top.RESPONSIVE_L, Bottom.S);
        content.setMaxWidth(MAX_WIDTH);
        content.setAlignItems(FlexComponent.Alignment.CENTER);
        content.setSizeFull();
        return content;
    }

    private FlexBoxLayout createScanInfoSection() {
        appStatus = new ListItem("", "App Status");
        appStatus.addClassName(LumoStyles.Margin.Horizontal.L);
        appStatus.setFlexDirection(FlexDirection.COLUMN);
        appStatus.setSpacing(Vertical.M);
        appStatus.setPadding(Vertical.RESPONSIVE_M);
        appStatus.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
        appStatus.setAlignItems(FlexComponent.Alignment.CENTER);
        appStatus.setReverse(true);
        appStatus.setAlignSelf(FlexComponent.Alignment.START);

        javaFileName = new ListItem("", "Java File Name");
        javaFileName.getPrimary().addClassName(LumoStyles.Heading.H4);
        javaFileName.setDividerVisible(true);
        javaFileName.setReverse(true);
        javaFileName.setWhiteSpace(WhiteSpace.PRE_LINE);

        browserType = new ListItem("", "Browser Type");
        browserType.setDividerVisible(true);
        browserType.setReverse(true);
        browserType.setWhiteSpace(WhiteSpace.PRE_LINE);

        browserMode = new ListItem("", "Browser Mode");
        browserMode.setDividerVisible(true);
        browserMode.setReverse(true);
        browserMode.setWhiteSpace(WhiteSpace.PRE_LINE);

        zap = new ListItem(UIUtils.createZapIcon(),
                            "", "ZAP Options");
        zap.setDividerVisible(true);
        zap.setReverse(true);
        zap.setWhiteSpace(WhiteSpace.PRE_LINE);

        requestTimestamp = new ListItem(UIUtils.createPrimaryIcon(VaadinIcon.CALENDAR),
                                "", "Request Timestamp");
        requestTimestamp.setDividerVisible(true);
        requestTimestamp.setReverse(true);
        requestTimestamp.setWhiteSpace(WhiteSpace.PRE_LINE);

        scanStatus = new ListItem("", "Scan Status");
        scanStatus.setDividerVisible(true);
        scanStatus.setReverse(true);
        scanStatus.setWhiteSpace(WhiteSpace.PRE_LINE);

        FlexBoxLayout listItems1 = new FlexBoxLayout(
                javaFileName,
                browserType,
                browserMode
        );
        listItems1.setFlexDirection(FlexDirection.COLUMN);
        FlexBoxLayout listItems2 = new FlexBoxLayout(
                zap,
                requestTimestamp,
                scanStatus
        );
        listItems2.setFlexDirection(FlexDirection.COLUMN);
        FlexBoxLayout listItems = new FlexBoxLayout(listItems1, listItems2);
        listItems.setFlexDirection(FlexDirection.ROW);
        listItems.setFlexWrap(FlexWrap.WRAP);

        FlexBoxLayout section = new FlexBoxLayout(appStatus, listItems);
        section.setAlignItems(FlexComponent.Alignment.CENTER);
        section.setFlex("1", listItems);
        section.setFlexWrap(FlexWrap.WRAP);
        section.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
        section.setPadding(Horizontal.S, Bottom.L);
        return section;
    }

    private Component createBoards() {
        Component functionalBoard = createFunctionalBoard();
        Component securityBoard = createSecurityBoard();

        Row boards = new Row(functionalBoard, securityBoard);
        boards.addClassName(LumoStyles.Margin.Top.M);
        UIUtils.setMaxWidth(MAX_WIDTH, boards);
        boards.setWidthFull();

        FlexBoxLayout section = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.SLIDERS, "Quick Overview"),
                boards);
        section.setBoxSizing(BoxSizing.BORDER_BOX);
        section.setDisplay(Display.BLOCK);
        section.setMargin(Top.XL);
        section.setMaxWidth(MAX_WIDTH);
        section.setPadding(Horizontal.RESPONSIVE_L);
        section.setWidthFull();
        return section;
    }

    private Component createFunctionalBoard() {
        // The Functional Board chart presents the TestNG Results of the scan.
        int passed = scanResults.getTestNgResults().getPassed();
        int failed = scanResults.getTestNgResults().getFailed();
        int ignored = scanResults.getTestNgResults().getIgnored();
        int skipped = scanResults.getTestNgResults().getSkipped();

        DataSeries series = new DataSeries();
        series.add(new DataSeriesItem("Passed", 	(long) (passed-1), 	2));
        series.add(new DataSeriesItem("Failed", 	(long) failed, 	8));
        series.add(new DataSeriesItem("Ignored", 	(long) ignored,	6));
        series.add(new DataSeriesItem("Skipped", 	(long) skipped,	0));

        FlexBoxLayout functional = new FlexBoxLayout(
                ChartUtils.createDonutChart("Functional Testing Overview", series, false));
        functional.setBoxSizing(BoxSizing.BORDER_BOX);
        functional.setDisplay(Display.BLOCK);
        functional.setMaxWidth(MAX_WIDTH);
        functional.setPadding(Horizontal.RESPONSIVE_L);
        functional.setWidthFull();
        return functional;
    }

    private Component createSecurityBoard() {
        // The Security Board chart presents the ZAP Results of the scan.
        int[] zapAlertsCount = scanResults.getZapResults().getZapAlertsCount();
        alertsHighCount = zapAlertsCount[1];
        alertsMediumCount = zapAlertsCount[2];
        alertsLowCount = zapAlertsCount[3];
        alertsInfoCount = zapAlertsCount[4];

        DataSeries series = new DataSeries();
        series.add(new DataSeriesItem("High", 		(long) alertsHighCount,     8));
        series.add(new DataSeriesItem("Medium", 		(long) alertsMediumCount,   3));
        series.add(new DataSeriesItem("Low",			(long) alertsLowCount,      6));
        series.add(new DataSeriesItem("Informational",(long) alertsInfoCount,     0));

        FlexBoxLayout security = new FlexBoxLayout(
                ChartUtils.createDonutChart("Security Testing Overview", series, false));
        security.setBoxSizing(BoxSizing.BORDER_BOX);
        security.setDisplay(Display.BLOCK);
        security.setMaxWidth(MAX_WIDTH);
        security.setPadding(Horizontal.RESPONSIVE_L);
        security.setWidthFull();
        return security;
    }

    private FlexBoxLayout createFunctionalGrid() {
        TestNgResults testNgResults = scanResults.getTestNgResults();
        FunctionalGrid functionalGrid = new FunctionalGrid(
                testNgResults.getSuite().getTest().getClazz().getTestMethod()
        );
        functionalGrid.createFooter(testNgResults);
        ListItem download = UIUtils.createDownloadItem(
                "TestNgReport-"+UIUtils.formatTimestamp(scan.getCreationDateTime())+".html",
                scan.getJavaFilePath()+"/reports/emailable-report.html",
                "Download the standard TestNG report, by clicking the download icon.");
        download.setAlignSelf(FlexComponent.Alignment.END, download);
        FlexBoxLayout functional = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.CLIPBOARD_CHECK, "Functional Testing Results"),
                functionalGrid,
                download
        );
        functional.setAlignSelf(FlexComponent.Alignment.END, download);
        functional.setBoxSizing(BoxSizing.BORDER_BOX);
        functional.setDisplay(Display.BLOCK);
        functional.setMargin(Top.XL);
        functional.setMaxWidth(MAX_WIDTH);
        functional.setPadding(Horizontal.M);
        functional.setWidthFull();
        return functional;
    }

    private FlexBoxLayout createSecurityGrid() {
        ZapResults zapResults = scanResults.getZapResults();
        SecurityGrid securityGrid = new SecurityGrid(
                zapResults.getSite().get(0).getAlerts()
        );
        securityGrid.createFooter(zapResults);
        ListItem download = UIUtils.createDownloadItem(
                "ZapReport-"+UIUtils.formatTimestamp(scan.getCreationDateTime())+".html",
                scan.getJavaFilePath()+"/reports/ZapReport.html",
                "Download the standard ZAP report, by clicking the download icon.");
        FlexBoxLayout security = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.SHIELD, "Security Testing Results"),
                securityGrid,
                download
        );
        security.setAlignSelf(FlexComponent.Alignment.END, download);
        security.setBoxSizing(BoxSizing.BORDER_BOX);
        security.setDisplay(Display.BLOCK);
        security.setMargin(Top.XL);
        security.setMaxWidth(MAX_WIDTH);
        security.setPadding(Horizontal.M);
        security.setWidthFull();
        return security;
    }

    private FlexBoxLayout createComparisonSection() {
        List<ZapResults> zapResults = new ArrayList<>();
        List<Scan> previousScans =
                scanService.findPreviousScanByIdAndUserId(scan.getId(), scan.getUserId(), scan.getZapOptions());
        int previousScansSize = previousScans.size();
        if (previousScansSize>0) {
            savePreviousScan(previousScans.get(previousScansSize-1));
            if (previousScansSize<13)
                for (Scan prevScan:previousScans)
                    try {
                        zapResults.add(prevScan.getScanResults().getZapResults());
                    } catch (JAXBException e) {
                        System.out.println("Previous Scans JAXBException : ");
                        e.printStackTrace();
                    } catch (IOException e) {
                        System.out.println("Previous Scans IOException : ");
                        e.printStackTrace();
                    }
            else {
                for (int i = 0; i<12; i++)
                    try {
                        zapResults.add(previousScans.get(previousScansSize-12+i).getScanResults().getZapResults());
                    } catch (JAXBException e) {
                        System.out.println("Previous Scans JAXBException : ");
                        e.printStackTrace();
                    } catch (IOException e) {
                        System.out.println("Previous Scans IOException : ");
                        e.printStackTrace();
                    }
            }
        }
        zapResults.add(scanResults.getZapResults());

        FlexBoxLayout section = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.BAR_CHART_H, "Security Vulnerabilities Comparative Presentation"),
                ChartUtils.createColumnChart(zapResults));
        section.setBoxSizing(BoxSizing.BORDER_BOX);
        section.setDisplay(Display.BLOCK);
        section.setMargin(Top.XL);
        section.setMaxWidth(MAX_WIDTH);
        section.setPadding(Horizontal.M);
        section.setWidthFull();
        return section;
    }

    private Component createFindingsSection() {
        FindingsSection findingsSection = new FindingsSection(scanResults, previousScanResults);
        FlexBoxLayout section = new FlexBoxLayout(
                UIUtils.createHeader(VaadinIcon.CROSSHAIRS, "Findings Comparison against Previous Scan " +
                        "(w/ identical ZAP Options)"),
                findingsSection);
//        section.setBoxSizing(BoxSizing.BORDER_BOX);
//        section.setDisplay(Display.BLOCK);
        section.setFlexDirection(FlexDirection.COLUMN);
        section.setMargin(Top.XL);
        section.setMaxWidth(MAX_WIDTH);
        section.setPadding(Horizontal.M);
        section.setWidthFull();
        return section;
    }

    private void createDeleteDialog() {
        deleteDialog = new ConfirmDialog("Confirm delete",
                "Are you sure you want to delete this scan?",
                "Delete", this::onDelete, "Cancel", this::onCancel);
        deleteDialog.setConfirmButtonTheme("error primary");
    }

    private void onDelete(ConfirmDialog.ConfirmEvent confirmEvent) {
        scanService.delete(scan);
        UI.getCurrent().navigate(Reports.class);
    }

    private void onCancel(ConfirmDialog.CancelEvent cancelEvent) {
        deleteDialog.close();
    }

    private Component createDeleteButton() {
        Button delete = UIUtils.createLargeButton("Delete this scan", VaadinIcon.TRASH);
        delete.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_PRIMARY);
        delete.addClickListener(event -> deleteDialog.open());
        return delete;
    }

    private void savePreviousScan(Scan previousScan) {
        this.previousScan = previousScan;
        try {
            previousScanResults = previousScan.getScanResults();
        } catch (JAXBException e) {
            System.out.println("Previous Scan JAXBException : ");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Previous Scan IOException : ");
            e.printStackTrace();
        }
    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        initAppBar();

        if (scan.isFinished()) {
            Icon icon = UIUtils.createLargeIcon(VaadinIcon.EXCLAMATION_CIRCLE);
            icon.setSize("100px");
            if (alertsHighCount>0) {
                icon.setColor("var(--lumo-error-text-color)");
                appStatus.setPrimaryText("In High Danger");
                appStatus.getPrimary().getStyle().set("color", "var(--lumo-error-text-color)");
            } else if (alertsMediumCount>0) {
                icon.setColor("#f7a35c");
                appStatus.setPrimaryText("In Medium Danger");
                appStatus.getPrimary().getStyle().set("color", "#f7a35c");
            } else if (alertsLowCount>0) {
                icon.setColor("#e4d354");
                appStatus.setPrimaryText("In Low Danger");
                appStatus.getPrimary().getStyle().set("color", "#e4d354");
            } else {
                icon.setColor("var(--lumo-primary-text-color)");
                appStatus.setPrimaryText("Safe");
                appStatus.getPrimary().getStyle().set("color", "var(--lumo-primary-text-color)");
            }
            appStatus.setPrefix(icon);
        } else if (scan.getStatus().equals(Scan.Status.ABORTED)){
            Icon icon = UIUtils.createErrorIcon(VaadinIcon.WARNING);
            icon.setSize("100px");
            appStatus.setPrefix(icon);
            appStatus.setPrimaryText("Not Available, please try again");
        } else {
            Icon icon = UIUtils.createTertiaryIcon(VaadinIcon.QUESTION);
            icon.setSize("100px");
            appStatus.setPrefix(icon);
            appStatus.setPrimaryText("Not Available Yet");
        }

        javaFileName.setPrimaryText(scan.getJavaFileName());
        javaFileName.setPrefix(UIUtils.createIconWithDownloadWrapper(
                VaadinIcon.FILE_CODE,
                scan.getJavaFileName(),
                scan.getJavaFilePath() + scan.getJavaFileName()
        ));
        browserType.setPrimaryText(scan.getBrowserType().toString());
        browserType.setPrefix(UIUtils.createBrowserIcon(scan.getBrowserType().toString()));

        if (scan.getHeadlessMode().equals(Scan.BrowserMode.OFF)) {
            browserMode.setPrefix(UIUtils.createPrimaryIcon(VaadinIcon.EYE));
            browserMode.setPrimaryText("w/ GUI");
        } else {
            browserMode.setPrefix(UIUtils.createSecondaryIcon(VaadinIcon.EYE_SLASH));
            browserMode.setPrimaryText("Headless");
        }

        String zapOptions = scan.getZapOptions();
        zap.setPrimaryText(zapOptions.substring(1, zapOptions.length()-1));

        requestTimestamp.setPrimaryText(UIUtils.formatDateTime(scan.getCreationDateTime()));

        scanStatus.setPrimaryText(scan.getStatus().toString());
        if (scan.getStatus().equals(Scan.Status.PENDING)) {
            scanStatus.setPrefix(UIUtils.createSecondaryIcon(VaadinIcon.HOURGLASS));
        } else if (scan.getStatus().equals(Scan.Status.RUNNING)) {
            scanStatus.setPrefix(UIUtils.createPrimaryIcon(VaadinIcon.START_COG));
        } else if (scan.getStatus().equals(Scan.Status.FINISHED)) {
            scanStatus.setPrefix(UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O));
        } else {
            scanStatus.setPrefix(UIUtils.createErrorIcon(VaadinIcon.EXCLAMATION_CIRCLE));
        }
    }

    private void initAppBar() {
        AppBar appBar = MainLayout.get().getAppBar();
        appBar.setNaviMode(AppBar.NaviMode.CONTEXTUAL);
        appBar.getContextIcon().addClickListener(e -> UI.getCurrent().navigate(Reports.class));
        appBar.setTitle(scan.getJavaFileName() + " on " + UIUtils.formatDateTime(scan.getCreationDateTime()));
    }
}
