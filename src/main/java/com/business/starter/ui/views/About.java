package com.business.starter.ui.views;

import com.business.starter.ui.MainLayout;
import com.business.starter.ui.components.FlexBoxLayout;
import com.business.starter.ui.components.ListItem;
import com.business.starter.ui.layout.size.Top;
import com.business.starter.ui.layout.size.Uniform;
import com.business.starter.ui.util.*;
import com.business.starter.ui.util.css.*;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.IFrame;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.page.Page;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.shared.Registration;

@Route(value = AppConst.PAGE_ABOUT, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_ABOUT + " | " + AppConst.APP_NAME)
public class About extends VerticalLayout {

    private Registration resizeListener;
    private IFrame fileVideo;
    private IFrame scanVideo;
    private IFrame resultsVideo;

    public About() {

        add(createContent());
        setSizeFull();
        UIUtils.setOverflow(Overflow.SCROLL, this);
        setJustifyContentMode(JustifyContentMode.CENTER);
        setAlignItems(Alignment.CENTER);
        getStyle().set("display", "block");
    }

    private Component createContent() {

        Component fileMedia     = createMediaWrapper(createFileMedia());
        Component scanMedia     = createMediaWrapper(createScanMedia());
        Component resultsMedia  = createMediaWrapper(createResultsMedia());

        Component fileText      = createTextWrapper("Get your Functional Test Files", createFileText());
        Component scanText      = createTextWrapper("Request a Scan"                , createScanText());
        Component resultsText   = createTextWrapper("Get the Results"               , createResultsText());

        Component fileRow       = createRow(fileMedia,      fileText,   true);
        Component scanRow       = createRow(scanText,       scanMedia,  false);
        Component resultsRow    = createRow(resultsMedia,   resultsText,true);

        FlexBoxLayout content = new FlexBoxLayout(
                new H2("Pentest Insights Wiki"),
                fileRow,
                scanRow,
                resultsRow
        );
        content.setAlignItems(FlexComponent.Alignment.CENTER);
        content.setFlexDirection(FlexDirection.COLUMN);
        content.setSizeFull();
        return content;
    }

    private Component createFileMedia() {
        String youtubeLink = "https://www.youtube.com/embed/_JNeiGbAgL4";
        fileVideo = createYoutubeVideo(youtubeLink);
        return fileVideo;
    }

    private Component createScanMedia() {
        String youtubeLink = "https://www.youtube.com/embed/2kaha1J-cQo";
        scanVideo = createYoutubeVideo(youtubeLink);
        return scanVideo;
    }

    private Component createResultsMedia() {
        String youtubeLink = "https://www.youtube.com/embed/41OlmzEODgU";
        resultsVideo = createYoutubeVideo(youtubeLink);
        return resultsVideo;
    }

    private IFrame createYoutubeVideo(String youtubeLink) {

        IFrame video = new IFrame(youtubeLink);
        video.setHeight("18.75vw");
        video.setWidthFull();
        video.setAllow("accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture");
        video.getElement().setAttribute("allowfullscreen", true);
        video.getElement().setAttribute("frameborder", "0");
        video.getElement().getStyle().set("margin-left", "auto");
        video.getElement().getStyle().set("margin-right", "auto");
        return video;
    }

    private FlexBoxLayout createFileText() {

        Html firstParText = new Html("<span>If you already have your <i>Functional Tests</i> written in " +
                "<b>Selenium Java</b>, all you need to do for this step is grab those and aggregate them into one " +
                "file.</span>");

        Html secondParText = new Html("<span>In case you do not have functional tests written in <b>Selenium " +
                "Java</b>, we will need to create those either manually (<b>not recommended</b>) or via the " +
                "<b><a href=\"https://www.selenium.dev/selenium-ide/\" target=\"_blank\">Selenium IDE</a></b> <a " +
                "href=\"https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en" +
                "\" target=\"_blank\">Chrome</a>/<a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/" +
                "\" target=\"_blank\">Firefox</a> add-on (<b>recommended</b>).</span>");

        FlexBoxLayout secondParContent = new FlexBoxLayout(
                secondParText,
                UIUtils.createH5Label("Using the Selenium IDE Chrome/Firefox add-on"),
                createListItem("Go ahead and install the Selenium IDE plugin to your favourite browser",
                        null, false),
                createListItem("Open the Selenium IDE window from the top right corner of your browser window",
                        null, false),
                createListItem("Create your tests using the IDE",
                        "Note: If you want your whole web app to be scanned, your first navigation has " +
                                "to be to the root url of your app. (e.g. the first recorded " +
                                "driver.get() command has to reference the root url of your app)", true),
                createListItem("Group them in a suite",
                        "Make sure that you execute the suite via the Selenium IDE and assert " +
                                "that the tests run as expected/recorded", true),
                createListItem("Export the suite selecting the Java jUnit code option",
                        "", false)
        );
        secondParContent.setFlexDirection(FlexDirection.COLUMN);
        secondParContent.setAlignItems(Alignment.START);

        return new FlexBoxLayout(
                createTextParagraph("Already have ones?", firstParText),
                createTextParagraph("Alternatively, create some", secondParContent)
        );
    }

    private FlexBoxLayout createScanText() {

        Html text = new Html("<span>As soon as you log in, you will be redirected to the " +
                "<a router-link href=\"" + AppConst.PAGE_HOME + "\">" + AppConst.TITLE_HOME +
                "</a> page.</br>" +
                "This is the page where you configure the desired options and request a scan for your web app.</span>");

        FlexBoxLayout parContent = new FlexBoxLayout(
                text,
                UIUtils.createH5Label("The " + AppConst.TITLE_HOME + " page:"),
                createListItem("First off, upload the Selenium Java Functional Tests file from the previous " +
                                    "step", null, false),
                createListItem("Open the Selenium IDE window from the top right corner of your browser window",
                                null, false),
                createListItem("Then, select the select the desired type of web browser you want tests to " +
                                "execute on",
                        "E.g. Google Chrome, Mozilla Firefox, etc", false),
                createListItem("Select whether you want the browser to run on GUI or Headless Mode",
                                "Note: This option has effect only if the server installed and ran locally",
                                false),
                createListItem("Select the type of scannings you want to be performed onto your web application",
                                "Note: The Active Scanning ZAP Option should be selected only and only if " +
                                        "one has written permission to attack/pentest the web app", false)
        );
        parContent.setFlexDirection(FlexDirection.COLUMN);
        parContent.setAlignItems(Alignment.START);


        return new FlexBoxLayout(
                createTextParagraph("Use the Functional Tests file to request a scan", parContent)
        );
    }

    private FlexBoxLayout createResultsText() {

        Html firstParText = new Html("<span>For a quick overview of your scanning results navigate to the " +
                "<a router-link href=\"" + AppConst.PAGE_DASHBOARD + "\">" + AppConst.TITLE_DASHBOARD +
                "</a> page.</span>");

        FlexBoxLayout firstParContent = new FlexBoxLayout(
                firstParText,
                UIUtils.createH5Label("The " + AppConst.TITLE_DASHBOARD + " page consists of:"),
                createListItem("A donut chart presenting the Functional Testing execution results",
                                "E.g. the quantity of functional tests passed, failed, etc",
                                false),
                createListItem("A donut chart presenting the Security Testing execution results",
                        "E.g. the alerts risen by OWASP ZAP due to the types of scanning chosen to be " +
                                "performed on the tested web app",false),
                createListItem("A comparative presentation of the Security Vulnerabilities risen by OWASP " +
                                "ZAP over the 12 most recent successfully finished scannings on your web app",
                        "Note: If you want your whole web app to be scanned, your first navigation has " +
                                "to be to the root url of your app. (e.g. the first recorded " +
                                "driver.get() command has to reference the root url of your app)", false),
                createListItem("A list of security vulnerability findings added compared to the first ever " +
                                "scanning conducted through the Pentest Insights platform",
                                null, false),
                createListItem("A list of security vulnerability findings fixed compared to the first ever " +
                                "scanning conducted through the Pentest Insights platform",
                                null, false)
        );
        firstParContent.setFlexDirection(FlexDirection.COLUMN);
        firstParContent.setAlignItems(Alignment.START);

        Html secondParText = new Html("<span>For a more analytical presentation of your scanning results navigate " +
                "to the <a router-link href=\"" + AppConst.PAGE_REPORTS + "\">" + AppConst.TITLE_REPORTS +
                "</a> page.</br>" +
                "On the top of the grid you will find the most recent finished scanning and by clicking or touching " +
                "on it you will be redirected to the equivalent " + AppConst.TITLE_SCAN_DETAILS + " page with the " +
                "full results of your scanning.</span>");

        FlexBoxLayout secondParContent = new FlexBoxLayout(
                secondParText,
                UIUtils.createH5Label("The " + AppConst.TITLE_SCAN_DETAILS + " page consists of:"),
                createListItem("A div with the scanning options selected when submitting the scanning",
                                "E.g. the functional tests java file, the browser type, the browser mode, " +
                                        "the ZAP Options, the timestamp of the scan request, the scan status",
                                false),
                createListItem("An App Status div which indicates the risk level at which the tested web app " +
                                "is exposed to",
                        "E.g. if the alert with the highest risk level risen by ZAP is a Low one then " +
                                "the App Status is marked as Low,if the alert with the highest risk level risen " +
                                "by ZAP is a Medium one then the App Status is marked as Medium etc",false),
                createListItem("A donut chart presenting the Functional Testing execution results",
                        "E.g. the quantity of functional tests passed, failed, etc",
                        false),
                createListItem("A donut chart presenting the Security Testing execution results",
                        "E.g. the alerts risen by OWASP ZAP due to the types of scanning chosen to be " +
                                "performed on the tested web app",false),
                createListItem("A grid table with the analytical Functional Testing results for every " +
                                "method in the java file",
                                "Note: You are able to toggle the details of a method by clicking or touching on it",
                                false),
                createListItem("A grid table with the analytical Security Testing results for every " +
                                "alert risen by ZAP",
                                "Note: You are able to toggle the details of an alert by clicking or touching on it",
                                false),
                createListItem("A comparative presentation of the Security Vulnerabilities risen by OWASP " +
                                "ZAP over the 12 most recent successfully finished scannings on your web app",
                        "Note: The scannings that are being compared into this chart are scannings with " +
                                "identical ZAP Options", false),
                createListItem("A list of security vulnerability findings added compared to the previous " +
                                "scanning conducted through the Pentest Insights platform",
                        "Note: The scannings that are being compared are scannings with " +
                                "identical ZAP Options", false),
                createListItem("A list of security vulnerability findings fixed compared to the previous " +
                                "scanning conducted through the Pentest Insights platform",
                        "Note: The scannings that are being compared are scannings with " +
                                "identical ZAP Options", false)
        );
        secondParContent.setFlexDirection(FlexDirection.COLUMN);
        secondParContent.setAlignItems(Alignment.START);

        return new FlexBoxLayout(
                createTextParagraph("Overview of your results", firstParContent),
                createTextParagraph("Analytical view of your results", secondParContent)
        );
    }

    private ListItem createListItem(String primary, String secondary, boolean secondaryColor) {

        ListItem item = new ListItem(
                UIUtils.createIcon(IconSize.S, TextColor.PRIMARY, VaadinIcon.CHECK_CIRCLE_O),
                primary
        );
        if (secondary != null) {
            item.setSecondaryText(secondary);
            if (secondaryColor)
                item.getSecondary().getStyle().set("color", TextColor.ERROR.getValue());
        }
        item.setAlignItems(Alignment.START);
        item.setSpacing(Uniform.S);
        item.setPadding(Top.XS);
        return item;
    }

    private Component createTextParagraph(String titleText, Component content) {

        Label title = UIUtils.createH5Label(titleText);

        FlexBoxLayout par = new FlexBoxLayout(
                title,
                content
        );
        par.setFlexDirection(FlexDirection.COLUMN);
        par.setAlignItems(Alignment.START);
        return par;
    }

    private Component createMediaWrapper(Component content) {

        FlexBoxLayout wrapper = new FlexBoxLayout(content);
        wrapper.setPosition(Position.RELATIVE);
        wrapper.getStyle().set("padding-bottom", "43.75%");
        wrapper.setFlexDirection(FlexDirection.COLUMN);
        wrapper.setSpacing(Uniform.XS);
        wrapper.setPadding(Uniform.RESPONSIVE_L);
        wrapper.setAlignItems(Alignment.CENTER);
        wrapper.setJustifyContentMode(JustifyContentMode.CENTER);
        wrapper.setBoxSizing(BoxSizing.BORDER_BOX);
        wrapper.setDisplay(Display.FLEX);
        wrapper.setWidthFull();
        return wrapper;
    }

    private Component createTextWrapper(String headerText, FlexBoxLayout content) {

        H3 header = new H3(headerText);
        content.setFlexDirection(FlexDirection.COLUMN);
        content.setSpacing(Uniform.XS);
        content.setAlignItems(Alignment.START);
        content.setBoxSizing(BoxSizing.BORDER_BOX);
        content.setDisplay(Display.BLOCK);
        content.setWidthFull();

        FlexBoxLayout wrapper = new FlexBoxLayout(
                header,
                content
        );
        wrapper.setFlexDirection(FlexDirection.COLUMN);
        wrapper.setSpacing(Uniform.XS);
        wrapper.setPadding(Uniform.RESPONSIVE_M);
        wrapper.setAlignItems(Alignment.CENTER);
        wrapper.setBoxSizing(BoxSizing.BORDER_BOX);
        wrapper.setDisplay(Display.BLOCK);
        wrapper.setWidthFull();
        return wrapper;
    }

    private Component createRow(Component firstContent, Component secondContent, boolean bg) {

        Component firstComponent = createSection(firstContent);
        Component secondComponent = createSection(secondContent);

        Row row = new Row(firstComponent, secondComponent);
        row.addClassNames(LumoStyles.Margin.Vertical.AUTO);
        if (bg) UIUtils.setBackgroundColor(LumoStyles.Color.BASE_COLOR, row);
        row.setWidthFull();
        return row;
    }

    private Component createSection(Component content) {

        FlexBoxLayout section = new FlexBoxLayout(content);
        section.setFlexDirection(FlexDirection.COLUMN);
        section.setAlignItems(Alignment.CENTER);
        section.setJustifyContentMode(JustifyContentMode.CENTER);
        section.setBoxSizing(BoxSizing.BORDER_BOX);
        section.setDisplay(Display.BLOCK);
        section.setPadding(Uniform.RESPONSIVE_L);
        section.setWidthFull();
        return section;
    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        getUI().ifPresent(ui -> {
            Page page = ui.getPage();
            resizeListener = page.addBrowserWindowResizeListener(event -> updateVideoSize(event.getWidth()));
            page.retrieveExtendedClientDetails(details -> updateVideoSize(details.getBodyClientWidth()));
        });
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        resizeListener.remove();
        super.onDetach(detachEvent);
    }

    private void updateVideoSize(int width) {
        fileVideo.setWidthFull();
        scanVideo.setWidthFull();
        resultsVideo.setWidthFull();

        if (width<1024) {
            fileVideo.setHeight("40.125vw");
            scanVideo.setHeight("40.125vw");
            resultsVideo.setHeight("40.125vw");
        } else {
            fileVideo.setHeight("18.75vw");
            scanVideo.setHeight("18.75vw");
            resultsVideo.setHeight("18.75vw");
        }

    }
}