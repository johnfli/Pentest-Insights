package com.business.starter.ui.components;

import com.business.starter.backend.entities.Scan;
import com.business.starter.ui.layout.size.Uniform;
import com.business.starter.ui.util.css.FlexDirection;
import com.business.starter.ui.util.css.FlexWrap;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.radiobutton.RadioButtonGroup;
import com.vaadin.flow.component.radiobutton.RadioGroupVariant;
import com.vaadin.flow.component.select.Select;
import com.vaadin.flow.component.upload.Upload;
import com.vaadin.flow.component.upload.receivers.MemoryBuffer;
import com.vaadin.flow.dom.DomEventListener;
import com.vaadin.flow.shared.Registration;
import elemental.json.Json;
import org.vaadin.gatanaso.MultiselectComboBox;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

@CssImport("./styles/styles.css")
public class ScanForm extends VerticalLayout {

    private final Long userId;

    private Span checkInputsSpan;
    private Span checkUploadSpan;

    private String targetFilePath;
    private String targetFileName;
    private File targetFile;
    private Upload upload;
    private boolean fileUploaded = false;
    private Select<Scan.BrowserType> browserSelect = new Select<>();
    private RadioButtonGroup<Scan.BrowserMode> browserMode = new RadioButtonGroup<>();
    private MultiselectComboBox zapOptionsSelect;

    private boolean scanningAlready = false;

    private Button testButton, clearButton;

    public ScanForm(Long userId) {
        this.userId = userId;

        setWidthFull();
        createErrorSpans();
        createUpload();
        createBrowserSelect();
        createBrowserMode();
        createZapOptionSelect();

        add(
                createFlexBoxLayout(),
                createButtonsLayout(),
                checkInputsSpan
        );

        setJustifyContentMode(JustifyContentMode.CENTER);
        setAlignItems(Alignment.CENTER);
    }

    private boolean isFormValid() {
        if (browserSelect.getValue()!=null)
            return (browserSelect.getValue().toString() != null &&
                    browserMode.getValue().toString() != null &&
                    !zapOptionsSelect.getValue().toString().equals("[]") &&
                    fileUploaded);
        else
            return false;
    }

    private void createErrorSpans() {
        checkInputsSpan = new Span("Scan not requested. Check the inputs of the form and try again");
        checkInputsSpan.setVisible(false);
        checkInputsSpan.getStyle().set("color", "red");
        checkUploadSpan = new Span("File should be a .java with Java jUnit exported Selenium IDE tests.");
        checkUploadSpan.getStyle().set("color", "red");
        checkUploadSpan.setVisible(false);
    }

    private FlexBoxLayout createFlexBoxLayout() {
        FlexBoxLayout flexBoxForm = new FlexBoxLayout(
                upload,
                checkUploadSpan,
                new HorizontalLayout(browserSelect, browserMode),
                zapOptionsSelect
        );
        flexBoxForm.setFlexDirection(FlexDirection.ROW);
        flexBoxForm.setFlexWrap(FlexWrap.WRAP);
        flexBoxForm.setJustifyContentMode(JustifyContentMode.CENTER);
        flexBoxForm.setSpacing(Uniform.S);
        flexBoxForm.setAlignItems(Alignment.AUTO);
        return flexBoxForm;
    }

    private void createZapOptionSelect() {
        zapOptionsSelect = new MultiselectComboBox();
        zapOptionsSelect.setWidth("80%");
        zapOptionsSelect.setLabel("Choose ZAP Options");
        zapOptionsSelect.setPlaceholder("Add options...");
        zapOptionsSelect.setItems(Scan.getAvailableZapOptions());
        zapOptionsSelect.setClearButtonVisible(true);
        zapOptionsSelect.addValueChangeListener(e -> testButton.setEnabled(isFormValid() && !scanningAlready));
    }

    private void createBrowserMode() {
        browserMode.setItems(Scan.BrowserMode.values());
        browserMode.setValue(Scan.BrowserMode.valueOf("OFF"));
        browserMode.setLabel("Browser Headless Mode");
        browserMode.addThemeVariants(RadioGroupVariant.LUMO_VERTICAL);
    }

    private void createBrowserSelect() {
        browserSelect.setLabel("Select Browser Type");
        browserSelect.setItems(Scan.BrowserType.values());
        browserSelect.setPlaceholder("Choose browser...");
        browserSelect.setValue(null);
        browserSelect.addValueChangeListener(e -> {
            if (e.getValue()!=null) {
                String browser = e.getValue().toString();
                boolean enabled = browser != null && !browser.isEmpty();
                if (enabled && !browser.equals("Chrome") && !browser.equals("Firefox")) {
                    browserMode.setItemEnabledProvider(item -> Scan.BrowserMode.valueOf("OFF").equals(item));
                    browserMode.setValue(Scan.BrowserMode.valueOf("OFF"));
                } else {
                    browserMode.setItemEnabledProvider(item ->
                            Scan.BrowserMode.valueOf("OFF").equals(item) ||
                                    Scan.BrowserMode.valueOf("ON").equals(item));
                }
                testButton.setEnabled(isFormValid() && !scanningAlready);
            }
        });
    }

    private void createUpload() {
        MemoryBuffer fileBuffer = new MemoryBuffer();
        upload = new Upload(fileBuffer);
        upload.setAcceptedFileTypes(".java");
        upload.setDropLabel(new Span("Upload your Selenium IDE tests here..."));
        upload.addFileRejectedListener(e -> {
            checkUploadSpan.setVisible(true);
        });
        upload.addFinishedListener(e -> {
            InputStream inputStream;

            fileUploaded = true;
            testButton.setEnabled(isFormValid() && !scanningAlready);

            if(checkUploadSpan.isVisible()) checkUploadSpan.setVisible(false);

            targetFileName = e.getFileName();
            targetFilePath = "src/main/resources/javaFiles/" + userId.toString();
            File dir = new File(targetFilePath);
            if (!dir.exists()) dir.mkdirs();
            targetFilePath += "/";
            inputStream =
                    fileBuffer.getInputStream();
            targetFile = new File(targetFilePath + targetFileName);

            try {
                Files.copy(
                        inputStream,
                        targetFile.toPath(),
                        StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        upload.getElement().addEventListener(
                "upload-abort",
                (DomEventListener) domEvent -> {
                    // called when user aborts the uploaded file
                    if (fileUploaded)
                        fileUploaded = !targetFile.delete();

                    testButton.setEnabled(isFormValid() && !scanningAlready);
                });
    }

    private Component createButtonsLayout() {
        createTestButton();
        createClearButton();
        return new HorizontalLayout(testButton, clearButton);
    }

    private void createTestButton() {
        testButton = new Button("Test App");
        testButton.setIcon(VaadinIcon.BOLT.create());
        testButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        testButton.addClickShortcut(Key.ENTER);
        testButton.setEnabled(false);
        testButton.addClickListener(click -> {

            if(isFormValid() && !scanningAlready) {
                Scan scan = new Scan(targetFilePath, targetFileName, browserSelect.getValue(), browserMode.getValue(),
                        zapOptionsSelect.getSelectedItems().toString(), userId);

                checkInputsSpan.setVisible(false);
                fileUploaded = false;
                upload.getElement().setPropertyJson("files", Json.createArray());
                zapOptionsSelect.deselectAll();
                browserMode.setValue(Scan.BrowserMode.valueOf("OFF"));
                browserSelect.clear();

                fireEvent(new TestAppEvent(this, scan));

            } else {
                checkInputsSpan.setVisible(true);
            }
        });
    }

    private void createClearButton() {
        clearButton = new Button("Clear");
        clearButton.setIcon(VaadinIcon.REFRESH.create());
        clearButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        clearButton.addClickShortcut(Key.ESCAPE);
        clearButton.addClickListener(click -> {

            fireEvent(new ClearEvent(this));

            upload.getElement().setPropertyJson("files", Json.createArray());
            if(fileUploaded) {
                if(targetFile.delete()) fileUploaded = false;
            }
            zapOptionsSelect.deselectAll();
            browserMode.setValue(Scan.BrowserMode.valueOf("OFF"));
            browserSelect.clear();
        });
    }

    // ==== E V E N T S ==== //

    // Events
    public static abstract class ScanFormEvent extends ComponentEvent<ScanForm> {
        private final Scan scan;

        protected ScanFormEvent(ScanForm source, Scan scan) {
            super(source, false);
            this.scan = scan;
        }

        public Scan getScan() {
            return this.scan;
        }
    }

    public static class TestAppEvent extends ScanFormEvent {
        TestAppEvent(ScanForm source, Scan scan) {
            super(source, scan);
        }
    }

    public static class ClearEvent extends ScanFormEvent {
        ClearEvent(ScanForm source) {
            super(source, null);
        }
    }

    public <T extends ComponentEvent<?>> Registration addListener(Class<T> eventType,
                                                                  ComponentEventListener<T> listener) {


        return getEventBus().addListener(eventType, listener);
    }

    // ==== GETTERS & SETTERS ==== //

    public String getTargetFileName() { return targetFileName; }

    public void setTargetFileName(String targetFileName) { this.targetFileName = targetFileName; }

    public Upload getUpload() { return upload; }

    public void setUpload(Upload upload) { this.upload = upload; }

    public Select<Scan.BrowserType> getBrowserSelect() { return browserSelect; }

    public void setBrowserSelect(Select<Scan.BrowserType> browserSelect) { this.browserSelect = browserSelect; }

    public RadioButtonGroup<Scan.BrowserMode> getBrowserMode() { return browserMode; }

    public void setBrowserMode(RadioButtonGroup<Scan.BrowserMode> browserMode) { this.browserMode = browserMode; }

    public MultiselectComboBox getZapOptionsSelect() { return zapOptionsSelect; }

    public void setZapOptionsSelect(MultiselectComboBox zapOptionsSelect) { this.zapOptionsSelect = zapOptionsSelect; }

    public boolean isFileUploaded() { return fileUploaded; }

    public void setFileUploaded(boolean fileUploaded) { this.fileUploaded = fileUploaded; }

    public Button getTestButton() { return testButton; }

    public void setTestButton(Button testButton) { this.testButton = testButton; }

    public Button getClearButton() { return clearButton; }

    public void setClearButton(Button clearButton) { this.clearButton = clearButton; }

    public boolean isScanningAlready() { return scanningAlready; }

    public void setScanningAlready(boolean scanningAlready) { this.scanningAlready = scanningAlready; }
}