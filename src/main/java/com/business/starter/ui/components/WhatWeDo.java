package com.business.starter.ui.components;

import com.business.starter.ui.layout.size.Uniform;
import com.business.starter.ui.util.LumoStyles;
import com.business.starter.ui.util.TextColor;
import com.business.starter.ui.util.UIUtils;
import com.business.starter.ui.util.css.*;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

public class WhatWeDo extends VerticalLayout {

    public WhatWeDo() {

        add(createContent());
        setWidthFull();
        setJustifyContentMode(JustifyContentMode.CENTER);
        setAlignItems(FlexComponent.Alignment.CENTER);
    }

    private Component createContent() {

        Component fileSection = createSection(
                createIcon(VaadinIcon.CLIPBOARD_CHECK),
                "Get your Functional Test Files",
                createFileText()
        );
        Component scanSection = createSection(
                createIcon(VaadinIcon.UPLOAD),
                "Request a Scan",
                createScanText());
        Component resultsSection = createSection(
                createIcon(VaadinIcon.SHIELD),
                "Get the Results",
                createResultsText());

        Component row = createRow(fileSection, scanSection, resultsSection);

        H2 header = new H2("Complement Functional Testing with Security Testing in just 3 steps");
        header.getStyle().set("text-align", "center");

        FlexBoxLayout content = new FlexBoxLayout(
                header,
                row
        );
        content.setAlignItems(FlexComponent.Alignment.CENTER);
        content.setFlexDirection(FlexDirection.COLUMN);
        content.setWidthFull();
        return content;
    }

    private FlexBoxLayout createIcon(VaadinIcon icon) {
        Icon i = UIUtils.createPrimaryIcon(icon);
        i.setSize(LumoStyles.IconSize.L);
        i.getElement().getStyle().set("margin-left", "auto").set("margin-right", "auto");
        FlexBoxLayout wrapper = new FlexBoxLayout(i);
        wrapper.setAlignItems(Alignment.CENTER);
        return wrapper;
    }

    private Component createFileText() {

        return new Html("<span><center>If you already have your <i>Functional Tests</i> written in " +
                "<b>Selenium Java</b>, all you need to do for this step is grab those and aggregate them into one " +
                "file.</br>" +
                "Alternatively, we will need to create those, either manually (<b>not recommended</b>) or via " +
                "the <b><a href=\"https://www.selenium.dev/selenium-ide/\" target=\"_blank\">Selenium IDE</a></b> " +
                "<a href=\"" +
                "https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en" +
                "\" target=\"_blank\">Chrome</a>/" +
                "<a href=\"" +
                "https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/" +
                "\" target=\"_blank\">Firefox</a> add-on (<b>recommended</b>).</center></span>");
    }

    private Component createScanText() {

        return new Html("<span><center>Upload the file, choose the type of the browser you want the " +
                "<i>Functional Tests</i> to execute on and the type of scanning you want to perform on your app.</br>" +
                "The platform runs its <i>Security Scannings</i> through one of the <b>best</b> open-source " +
                "penetration testing tools, <b><a router-link href=\"https://www.zaproxy.org/\" target=\"_blank\">" +
                "OWASP ZAP</a></b>.</br></center></span>");
    }

    private Component createResultsText() {

        return new Html("<span><center>Get a full <i>Security Report</i> with comparative presentation, " +
                "findings analysis and solution suggestions that will aid the process of securing your web app." +
                "</center></span>");
    }

    private Component createRow(Component firstComponent, Component secondComponent, Component thirdComponent) {

        Row row = new Row(firstComponent, secondComponent, thirdComponent);
        row.addClassNames(LumoStyles.Margin.Vertical.AUTO);
        UIUtils.setBackgroundColor(LumoStyles.Color.BASE_COLOR, row);
        row.setWidthFull();
        row.setMaxWidth("1440px");
        return row;
    }

    private Component createSection(FlexBoxLayout icon, String headerText, Component textComponent) {

        Label label = UIUtils.createH3Label(headerText);
        UIUtils.setTextColor(TextColor.PRIMARY, label);
        UIUtils.setTextAlign(TextAlign.CENTER, label);

        FlexBoxLayout section = new FlexBoxLayout(
                icon,
                label,
                textComponent
        );
        section.setFlexDirection(FlexDirection.COLUMN);
        section.setAlignItems(FlexComponent.Alignment.CENTER);
        section.setJustifyContentMode(JustifyContentMode.CENTER);
        section.setBoxSizing(BoxSizing.BORDER_BOX);
        section.setDisplay(Display.BLOCK);
        section.setSpacing(Uniform.XS);
        section.setPadding(Uniform.RESPONSIVE_L);
        section.setWidthFull();
        section.setMinWidth("400px");
        return section;
    }
}