package com.business.starter.ui.components;

import com.business.starter.backend.entities.scanResults.zap.Alert;
import com.business.starter.backend.entities.scanResults.zap.Instance;
import com.business.starter.backend.entities.scanResults.zap.ZapResults;
import com.business.starter.ui.layout.size.Right;
import com.business.starter.ui.layout.size.Uniform;
import com.business.starter.ui.layout.size.Vertical;
import com.business.starter.ui.util.FontSize;
import com.business.starter.ui.util.LineHeight;
import com.business.starter.ui.util.TextColor;
import com.business.starter.ui.util.UIUtils;
import com.business.starter.ui.util.css.*;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.details.Details;
import com.vaadin.flow.component.grid.*;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.page.Page;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.provider.ListDataProvider;
import com.vaadin.flow.data.provider.SortDirection;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.shared.Registration;
import org.apache.commons.lang3.StringUtils;

import java.util.Collections;
import java.util.List;

public class SecurityGrid extends Grid<Alert> {

    private HeaderRow filterRow = null;
    private ComboBox<RiskLevel> riskFilter;
    private FooterRow footerRow = null;
    private Label footerLabel;

    private enum RiskLevel {
        Informational   ("0"),
        Low             ("1"),
        Medium          ("2"),
        High            ("3");

        private final String name;

        RiskLevel(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }
    private enum ConfidenceLevel {
        None   ("0"),
        Low             ("1"),
        Medium          ("2"),
        High            ("3");

        private final String name;

        ConfidenceLevel (String name) { this.name = name; }

        public String getName() { return name; }
    }

    public static final int MOBILE_BREAKPOINT = 720;
    private Registration resizeListener;

    List<Alert> alerts;

    public SecurityGrid (List<Alert> alerts) {
        this.alerts = alerts;
        createGrid();
    }

    private void createGrid() {

        setSelectionMode(SelectionMode.NONE);
        addThemeName("mobile");
        ListDataProvider<Alert> dataProvider
                = new ListDataProvider<>(alerts);
        setDataProvider(dataProvider);

        // "Mobile" column
        Grid.Column<Alert> mobileColumn =
                addColumn(new ComponentRenderer<>(this::getMobileTemplate))
                        .setSortable(true)
                        .setComparator(Alert::getName)
                        .setHeader("Alert");
        mobileColumn.setVisible(false);

        // "Desktop" columns
        Grid.Column<Alert> nameColumn =
                addColumn(new ComponentRenderer<>(this::createAlertName))
                        .setComparator(Alert::getName)
                        .setAutoWidth(true)
                        .setFlexGrow(1)
                        .setHeader("Alert Name")
                        .setSortable(true);

        Grid.Column<Alert> riskColumn =
                addColumn(new ComponentRenderer<>(this::createRiskLevel))
                        .setSortable(true)
                        .setComparator(Alert::getRiskcode)
                        .setAutoWidth(true)
                        .setFlexGrow(0)
                        .setHeader("Risk Level")
                        .setTextAlign(ColumnTextAlign.CENTER);

        Grid.Column<Alert> confidenceColumn =
                addColumn(new ComponentRenderer<>(this::createConfidenceLevel))
                        .setSortable(true)
                        .setComparator(Alert::getConfidence)
                        .setAutoWidth(true)
                        .setFlexGrow(0)
                        .setHeader("Confidence Level")
                        .setTextAlign(ColumnTextAlign.CENTER);
        // Add Grid Item Details
        setItemDetailsRenderer(new ComponentRenderer<>(this::createItemDetails));
        // Add Grid Filtering functionality for each Column
        filterRow = appendHeaderRow();
        // First filter
        TextField nameFilter = new TextField();
        nameFilter.addValueChangeListener(event -> dataProvider.addFilter(
                alert -> StringUtils.containsIgnoreCase(alert.getName(),
                        nameFilter.getValue())));
        nameFilter.setValueChangeMode(ValueChangeMode.EAGER);

        filterRow.getCell(nameColumn).setComponent(nameFilter);
        nameFilter.setPlaceholder("Filter by Alert Name");
        // Second filter
        riskFilter = new ComboBox<>();
        riskFilter.setItems(RiskLevel.values());
        riskFilter.addValueChangeListener(event -> {
            if (event.getValue() != null)
                dataProvider.addFilter(alert -> StringUtils.equals(
                            alert.getRiskcode(), riskFilter.getValue().getName()));
            else
                dataProvider.clearFilters();
        });

        filterRow.getCell(riskColumn).setComponent(riskFilter);
        riskFilter.setSizeFull();
        riskFilter.setClearButtonVisible(true);
        riskFilter.setPlaceholder("Filter by Risk");
        // Third filter
        ComboBox<ConfidenceLevel> confidenceFilter = new ComboBox<>();
        confidenceFilter.setItems(ConfidenceLevel.values());
        confidenceFilter.addValueChangeListener(event -> {
            if (event.getValue() != null)
                dataProvider.addFilter(alert -> StringUtils.equals(
                            alert.getConfidence(), confidenceFilter.getValue().getName()));
            else
                dataProvider.clearFilters();
        });

        filterRow.getCell(confidenceColumn).setComponent(confidenceFilter);
        confidenceFilter.setSizeFull();
        confidenceFilter.setClearButtonVisible(true);
        confidenceFilter.setPlaceholder("Filter by Confidence");

        setClassNameGenerator(alert -> {
            switch (alert.getRiskcode()) {
                case "0":
                    return "informational";
                case "1":
                    return "low";
                case "2":
                    return "medium";
                case "3":
                    return "high";
                default:
                    return "";
        }});
        setHeightByRows(true);
        setWidthFull();
        sort(Collections.singletonList(new GridSortOrder<>(riskColumn, SortDirection.DESCENDING)));
    }

    public void createFooter(ZapResults zapResults) {
        // Set Grid Footer
        int[] zapAlertsCount = zapResults.getZapAlertsCount();
        int total = zapAlertsCount[0];
        int high = zapAlertsCount[1];
        int medium = zapAlertsCount[2];
        int low = zapAlertsCount[3];
        int info = zapAlertsCount[4];
        footerLabel = new Label(
                    "Total: "           + total +
                        ", High: "          + high +
                        ", Medium: "        + medium +
                        ", Low: "           + low +
                        ", Informational: " + info
        );
        footerRow = appendFooterRow();
        footerRow.getCell(getColumns().get(1)).setComponent(footerLabel);
    }

    private SecurityGridMobileTemplate getMobileTemplate(Alert alert) {
        return new SecurityGridMobileTemplate(alert);
    }

    private Component createAlertName(Alert alert) {
        ListItem item = new ListItem(alert.getName());
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createRiskLevel(Alert alert) {
        String riskLevel = null;
        switch (alert.getRiskcode()) {
            case "0":
                riskLevel = "Informational";
                break;
            case "1":
                riskLevel = "Low";
                break;
            case "2":
                riskLevel = "Medium";
                break;
            case "3":
                riskLevel = "High";
                break;
        }
        ListItem item = new ListItem(riskLevel);
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createConfidenceLevel(Alert alert) {
        String confidenceLevel = null;
        switch (alert.getConfidence()) {
            case "0":
                confidenceLevel = "None";
                break;
            case "1":
                confidenceLevel = "Low";
                break;
            case "2":
                confidenceLevel = "Medium";
                break;
            case "3":
                confidenceLevel = "High";
                break;
        }
        ListItem item = new ListItem(confidenceLevel);
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createItemDetails(Alert alert) {
        FlexBoxLayout itemDetails =  new FlexBoxLayout();
        if (alert.getDesc() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Description ", new Html("<div>" + alert.getDesc() + "</div>")));
        if (alert.getInstances().size() > 0)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Instances ", createInstancesDetails(alert.getInstances())));
        if (alert.getSolution() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Solution ", new Html("<div>" + alert.getSolution() + "</div>")));
        if (alert.getOtherinfo() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Other Information ", new Html("<div>" + alert.getOtherinfo() + "</div>")));
        if (alert.getReference() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Reference ", new Html("<div>" + alert.getReference() + "</div>")));
        if (alert.getCweid() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "CWE Id ", new Label(alert.getCweid())));
        if (alert.getWascid() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "WASC Id ", new Label(alert.getWascid())));
        if (alert.getSourceid() != null)
            itemDetails.add(UIUtils.createItemDetailsRow(
                    "Source ID ", new Label(alert.getSourceid())));
        itemDetails.setSizeFull();
        itemDetails.setPadding(Uniform.RESPONSIVE_M);
        itemDetails.setBorderRadius(BorderRadius.S);
        itemDetails.setFlexDirection(FlexDirection.COLUMN);
        itemDetails.setBackgroundColor("var(--lumo-contrast-10pct)");
        itemDetails.setShadow(Shadow.XS);
        return itemDetails;
    }

    private Component createInstancesDetails(List<Instance> instances) {
        VerticalLayout detailsContent = new VerticalLayout();
        for (Instance instance:instances) {
            if (instance.getUri() != null)
                detailsContent.add(UIUtils.createItemDetailsRow(
                        "URL ", UIUtils.createLabel(TextColor.BODY, instance.getUri())));
            if (instance.getMethod() != null)
                detailsContent.add(UIUtils.createItemDetailsRow(
                        "Method ", UIUtils.createLabel(TextColor.BODY, instance.getMethod())));
            if (instance.getParam() != null)
                detailsContent.add(UIUtils.createItemDetailsRow(
                        "Parameter ", UIUtils.createLabel(TextColor.BODY, instance.getParam())));
            if (instance.getEvidence() != null)
                detailsContent.add(UIUtils.createItemDetailsRow(
                        "Evidence ", UIUtils.createLabel(TextColor.BODY, instance.getEvidence())));
            if (instance.getAttack() != null)
                detailsContent.add(UIUtils.createItemDetailsRow(
                        "Attack ", UIUtils.createLabel(TextColor.BODY, instance.getAttack())));
        }
        detailsContent.setSizeFull();
        Details details = new Details("Show Instances Analytically", detailsContent);
        details.addOpenedChangeListener(e -> getElement().executeJs("this.notifyResize()"));
        return details;

    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        getUI().ifPresent(ui -> {
            Page page = ui.getPage();
            resizeListener = page.addBrowserWindowResizeListener(event -> updateVisibleColumns(event.getWidth()));
            page.retrieveExtendedClientDetails(details -> updateVisibleColumns(details.getBodyClientWidth()));
        });
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        resizeListener.remove();
        super.onDetach(detachEvent);
    }

    private void updateVisibleColumns(int width) {
        List<Column<Alert>> columns = getColumns();
        boolean mobile;

        if (footerRow != null) {
            mobile = width < MOBILE_BREAKPOINT;
            if (mobile) {
                footerRow.getCell(columns.get(0)).setComponent(footerLabel);
                footerRow.getCell(columns.get(1)).setComponent(null);
            } else {
                footerRow.getCell(columns.get(1)).setComponent(footerLabel);
                footerRow.getCell(columns.get(0)).setComponent(null);
            }
        } else
            mobile = width < 2*MOBILE_BREAKPOINT;

        // "Mobile" column
        columns.get(0).setVisible(mobile);
        if (mobile) {
            filterRow.getCell(columns.get(0)).setComponent(riskFilter);
            filterRow.getCell(columns.get(2)).setComponent(null);
        } else {
            filterRow.getCell(columns.get(0)).setComponent(null);
            filterRow.getCell(columns.get(2)).setComponent(riskFilter);
        }

        // "Desktop" columns
        for (int i = 1; i < columns.size(); i++) {
            columns.get(i).setVisible(!mobile);
        }
    }
    /**
     * A layout for displaying BankAccount info in a mobile friendly format.
     */
    private static class SecurityGridMobileTemplate extends FlexBoxLayout {

        private final Alert alert;

        public SecurityGridMobileTemplate(Alert alert) {
            this.alert = alert;

            UIUtils.setLineHeight(LineHeight.M, this);
            UIUtils.setPointerEvents(PointerEvents.NONE, this);

            setPadding(Vertical.S);
            setSpacing(Right.L);

            Label alertName = getAlertName();
            Label riskDesc = getRiskDesc();

            add(
                    alertName,
                    riskDesc
            );
            setFlexDirection(FlexDirection.COLUMN);
        }

        private Label getAlertName() {
            Label alertName;
            switch (alert.getRiskcode()) {
                case "0":
                    alertName = UIUtils.createLabel(FontSize.S, TextColor.PRIMARY, alert.getName());
                    break;
                case "1":
                    alertName = UIUtils.createLabel(FontSize.S, TextColor.BODY, alert.getName());
                    alertName.getStyle().set("color", "#e4d354");
                    break;
                case "2":
                    alertName = UIUtils.createLabel(FontSize.S, TextColor.BODY, alert.getName());
                    alertName.getStyle().set("color", "#f7a35c");
                    break;
                case "3":
                    alertName = UIUtils.createLabel(FontSize.S, TextColor.ERROR, alert.getName());
                    break;
                default:
                    alertName = UIUtils.createLabel(FontSize.S, TextColor.BODY, alert.getName());
                    break;
            }
            UIUtils.setOverflow(Overflow.HIDDEN, alertName);
            UIUtils.setTextOverflow(TextOverflow.ELLIPSIS, alertName);
            return alertName;
        }

        private Label getRiskDesc() {
            return UIUtils.createLabel(FontSize.S, TextColor.SECONDARY,
                    alert.getRiskdesc());
        }
    }
}

