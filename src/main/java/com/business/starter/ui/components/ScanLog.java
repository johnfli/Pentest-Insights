package com.business.starter.ui.components;

import com.business.starter.backend.entities.Scan;
import com.business.starter.backend.services.ScanService;
import com.business.starter.ui.layout.size.Right;
import com.business.starter.ui.layout.size.Vertical;
import com.business.starter.ui.util.*;
import com.business.starter.ui.util.css.FlexDirection;
import com.business.starter.ui.util.css.Overflow;
import com.business.starter.ui.util.css.PointerEvents;
import com.business.starter.ui.util.css.TextOverflow;
import com.business.starter.ui.views.ScanDetails;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.GridSortOrder;
import com.vaadin.flow.component.grid.GridVariant;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.page.Page;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.provider.SortDirection;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.shared.Registration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ScanLog extends VerticalLayout {

    public static final int MOBILE_BREAKPOINT = 480;
    private Registration resizeListener;

    private final ScanService scanService;
    private Grid<Scan> grid;
    private TextField filter;
    private final long userId;

    private Button delete;
    private List<Scan> scansToBeDeleted = new ArrayList<>();
    ConfirmDialog deleteDialog;

    public ScanLog(ScanService scanService, long userId) {
        this.scanService = scanService;
        this.userId = userId;
        createDeleteDialog();
        createContent();
    }

    private void createContent() {
        final HorizontalLayout topLayout = createTopBar();
        add(topLayout);
        add(createGrid());
        add(createDeleteButton());
        setFlexGrow(1, grid);
        setFlexGrow(0, topLayout);
        setWidthFull();
        getStyle().set("display", "block");
        expand(grid);
    }

    public HorizontalLayout createTopBar() {
        filter = new TextField();
        filter.setPlaceholder("Filter...");
        filter.setClearButtonVisible(true);
        filter.setValueChangeMode(ValueChangeMode.EAGER);
        filter.addValueChangeListener(e -> updateList());

        final HorizontalLayout topLayout = new HorizontalLayout();
        topLayout.setWidth("100%");
        topLayout.add(filter);
        topLayout.setVerticalComponentAlignment(FlexComponent.Alignment.START, filter);
        topLayout.expand(filter);
        return topLayout;
    }

    private Grid createGrid() {
        grid = new Grid<>();
        grid.setSelectionMode(Grid.SelectionMode.MULTI);
        grid.asMultiSelect().addValueChangeListener(event -> {
            scansToBeDeleted = new ArrayList<>(event.getValue());
            delete.setEnabled(!scansToBeDeleted.isEmpty());
        });
        grid.addItemClickListener(event -> viewDetails(event.getItem()));
        grid.addThemeName("mobile");
        updateList();
        grid.setSizeFull();

        // "Mobile" column
        grid.addColumn(new ComponentRenderer<>(this::getMobileTemplate))
                .setSortable(true)
                .setComparator(Scan::getCreationDateTime)
                .setHeader("Scan")
                .setVisible(false);

        // "Desktop" columns
        grid.addColumn(new ComponentRenderer<>(this::createStatus))
                .setComparator(Scan::getStatus)
                .setAutoWidth(true)
                .setFlexGrow(0)
                .setHeader("Status")
                .setSortable(true);
        grid.addColumn(new ComponentRenderer<>(this::createScanInfo))
                .setComparator(Scan::getJavaFileName)
                .setAutoWidth(true)
                .setFlexGrow(1)
                .setHeader("Scan File")
                .setSortable(true);
        grid.addColumn(new ComponentRenderer<>(this::createBrowserType))
                .setComparator(Scan::getBrowserType)
                .setAutoWidth(true)
                .setFlexGrow(0)
                .setHeader("Browser Type")
                .setSortable(true);
        grid.addColumn(new ComponentRenderer<>(this::createBrowserMode))
                .setComparator(Scan::getHeadlessMode)
                .setAutoWidth(true)
                .setTextAlign(ColumnTextAlign.CENTER)
                .setFlexGrow(0)
                .setHeader("Browser Mode")
                .setSortable(true);
        grid.addColumn(new ComponentRenderer<>(this::createZapOptions))
                .setComparator(Scan::getZapOptions)
                .setAutoWidth(true)
                .setFlexGrow(0)
                .setHeader("ZAP Options")
                .setSortable(true);
        Grid.Column<Scan> creationDate = grid.addColumn(new ComponentRenderer<>(this::createDate))
                .setComparator(Scan::getCreationDateTime)
                .setAutoWidth(true)
                .setFlexGrow(0)
                .setHeader("Request Timestamp")
                .setTextAlign(ColumnTextAlign.START)
                .setSortable(true);
        grid.addThemeVariants(GridVariant.LUMO_ROW_STRIPES);
        grid.sort(Collections.singletonList(new GridSortOrder<>(creationDate, SortDirection.DESCENDING)));
        grid.setHeightByRows(true);
        return grid;
    }

    private ScanDetailsMobileTemplate getMobileTemplate(Scan scan) {
        return new ScanDetailsMobileTemplate(scan);
    }

    private void viewDetails(Scan scan) {
        UI.getCurrent().navigate(ScanDetails.class, scan.getId());
    }

    private Component createScanInfo(Scan scan) {
        ListItem item = new ListItem(scan.getJavaFileName());
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createBrowserType(Scan scan) {
        String browserType = scan.getBrowserType().toString();
        ListItem item = new ListItem(browserType);
        item.setPadding(Vertical.XS);
        item.setPrefix(UIUtils.createBrowserIcon(browserType));
        item.setSpacing(Right.S);
        return item;
    }

    private Component createBrowserMode(Scan scan) {
        Icon icon;
        if (scan.getHeadlessMode().equals(Scan.BrowserMode.OFF)) {
            icon = UIUtils.createPrimaryIcon(VaadinIcon.EYE);
        } else {
            icon = UIUtils.createSecondaryIcon(VaadinIcon.EYE_SLASH);
        }
        return icon;
    }

    private Component createZapOptions(Scan scan) {
        String zapOptions = scan.getZapOptions();
        zapOptions = zapOptions.substring(1, zapOptions.length()-1);
        String[] parts = zapOptions.split("\\s*,\\s*");
        ListItem item = new ListItem(
                "Amount of options: " + parts.length
        );
        item.setSecondaryText(zapOptions);
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.XS);
        return item;
    }

    private Component createStatus(Scan scan) {
        Icon icon;
        if (scan.getStatus().equals(Scan.Status.PENDING)) {
            icon = UIUtils.createSecondaryIcon(VaadinIcon.HOURGLASS);
        } else if (scan.getStatus().equals(Scan.Status.RUNNING)) {
            icon = UIUtils.createPrimaryIcon(VaadinIcon.START_COG);
        } else if (scan.getStatus().equals(Scan.Status.FINISHED)) {
            icon = UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O);
        } else {
            icon = UIUtils.createErrorIcon(VaadinIcon.EXCLAMATION_CIRCLE);
        }
        return icon;
    }

    private Component createDate(Scan scan) {
        return new Span(UIUtils.formatDateTime(scan.getCreationDateTime()));
    }

    private void updateList() {
        grid.setItems(scanService.findAllByUserId(userId, filter.getValue()));
    }

    private void createDeleteDialog() {
        deleteDialog = new ConfirmDialog("Confirm delete",
                "Are you sure you want to delete the selected scans?",
                "Delete", this::onDelete, "Cancel", this::onCancel);
        deleteDialog.setConfirmButtonTheme("error primary");
    }

    private void onDelete(ConfirmDialog.ConfirmEvent confirmEvent) {
        if (scansToBeDeleted.isEmpty())
            UIUtils.showNotification("No scan was selected for deletion.");
        else
            for (Scan scan:scansToBeDeleted) scanService.delete(scan);
        updateList();
    }

    private void onCancel(ConfirmDialog.CancelEvent cancelEvent) {
        deleteDialog.close();
    }

    private Component createDeleteButton() {
        delete = UIUtils.createErrorPrimaryButton("Delete", VaadinIcon.TRASH);
        delete.addClickListener(event -> deleteDialog.open());
        delete.setEnabled(false);
        return delete;
    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        getUI().ifPresent(ui -> {
            Page page = ui.getPage();
            resizeListener = page.addBrowserWindowResizeListener(event -> updateVisibleColumns(event.getWidth()));
            page.retrieveExtendedClientDetails(details -> updateVisibleColumns(details.getBodyClientWidth()));
        });
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        resizeListener.remove();
        super.onDetach(detachEvent);
    }

    private void updateVisibleColumns(int width) {
        boolean mobile = width < MOBILE_BREAKPOINT;
        List<Grid.Column<Scan>> columns = grid.getColumns();

        // "Mobile" column
        columns.get(0).setVisible(mobile);

        // "Desktop" columns
        for (int i = 1; i < columns.size(); i++) {
            columns.get(i).setVisible(!mobile);
        }
    }
    /**
     * A layout for displaying BankAccount info in a mobile friendly format.
     */
    private class ScanDetailsMobileTemplate extends FlexBoxLayout {

        private final Scan scan;

        public ScanDetailsMobileTemplate(Scan scan) {
            this.scan = scan;

            UIUtils.setLineHeight(LineHeight.M, this);
            UIUtils.setPointerEvents(PointerEvents.NONE, this);

            setPadding(Vertical.S);
            setSpacing(Right.L);

            Icon status = getStatus();
            Label javaFileName = getJavaFileName();
            Component browserType = getBrowserType();
            FlexBoxLayout details = getDetails();

            FlexBoxLayout column = new FlexBoxLayout(javaFileName, browserType, details);
            column.setFlexDirection(FlexDirection.COLUMN);
            column.setOverflow(Overflow.HIDDEN);

            add(status, column);
            setFlexGrow(1, column);
        }

        private Icon getStatus() {
            Icon icon;
            if (scan.getStatus().equals(Scan.Status.PENDING)) {
                icon = UIUtils.createSecondaryIcon(VaadinIcon.HOURGLASS);
            } else if (scan.getStatus().equals(Scan.Status.RUNNING)) {
                icon = UIUtils.createPrimaryIcon(VaadinIcon.START_COG);
            } else if (scan.getStatus().equals(Scan.Status.FINISHED)) {
                icon = UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O);
            } else {
                icon = UIUtils.createErrorIcon(VaadinIcon.EXCLAMATION_CIRCLE);
            }
            setFlexShrink("0", icon);
            icon.setSize(LumoStyles.IconSize.M);
            return icon;
        }

        private Label getJavaFileName() {
            Label fileName = UIUtils.createLabel(FontSize.S, TextColor.BODY, scan.getJavaFileName());
            UIUtils.setOverflow(Overflow.HIDDEN, fileName);
            UIUtils.setTextOverflow(TextOverflow.ELLIPSIS, fileName);

            return fileName;
        }

        private Component getBrowserType() {
            String browserType = scan.getBrowserType().toString();
            ListItem item = new ListItem(browserType);
            item.setPadding(Vertical.XS);
            item.setPrefix(new Image(getBrowserIconPath(browserType), browserType + " logo"));
            item.setSpacing(Right.S);
            return item;
        }

        private String getBrowserIconPath(String browserType) {
            return UIUtils.IMG_PATH + "logos/browsers/" + browserType.toLowerCase()
                    + "-icon.png";
        }

        private FlexBoxLayout getDetails() {
            String options = scan.getZapOptions();
            Label zapOptions = UIUtils.createLabel(FontSize.S, TextColor.SECONDARY,
                    options.substring(1, options.length()-1));

            Label updated = UIUtils.createLabel(FontSize.XS, TextColor.TERTIARY,
                    UIUtils.formatDateTime(scan.getCreationDateTime()));

            FlexBoxLayout wrapper = new FlexBoxLayout(zapOptions, updated);
            wrapper.setFlexDirection(FlexDirection.COLUMN);
            wrapper.setAlignItems(Alignment.BASELINE);
            wrapper.setFlexGrow(1, zapOptions);
            return wrapper;
        }
    }
}
