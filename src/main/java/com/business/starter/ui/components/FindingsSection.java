package com.business.starter.ui.components;

import com.business.starter.backend.entities.scanResults.ScanResults;
import com.business.starter.backend.entities.scanResults.zap.Alert;
import com.business.starter.ui.layout.size.Bottom;
import com.business.starter.ui.layout.size.Horizontal;
import com.business.starter.ui.layout.size.Top;
import com.business.starter.ui.util.LumoStyles;
import com.business.starter.ui.util.UIUtils;
import com.business.starter.ui.util.css.BoxSizing;
import com.business.starter.ui.util.css.Display;
import com.business.starter.ui.views.ScanDetails;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.details.Details;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;

import java.util.ArrayList;
import java.util.List;

public class FindingsSection extends Row {

    ScanResults scanResults;
    ScanResults previousScanResults;

    public FindingsSection(ScanResults scanResults, ScanResults previousScanResults) {
        this.scanResults = scanResults;
        this.previousScanResults = previousScanResults;
        createContent();
    }

    private void createContent() {
        List<Alert> commonAlerts = null;
        if (previousScanResults != null)
            commonAlerts = scanResults.getZapResults()
                    .getCommonAlerts(previousScanResults.getZapResults());

        FlexBoxLayout findingsAdded = createFindingsAdded(commonAlerts);
        FlexBoxLayout findingsFixed = createFindingsFixed(commonAlerts);

        add(findingsAdded);
        add(findingsFixed);
        addClassNames(LumoStyles.Margin.Top.S, LumoStyles.Margin.Bottom.M);
        setMaxWidth(ScanDetails.MAX_WIDTH);
        setWidthFull();
    }

    private FlexBoxLayout createFindingsAdded(List<Alert> commonAlerts) {
        List<Alert> addedAlerts = findAlertsAdded(commonAlerts);
        int addedAlertsCount = 0;
        if (addedAlerts != null) addedAlertsCount = addedAlerts.size();
        ListItem findingsAdded = UIUtils.createFindingsItem(
                VaadinIcon.BUG_O, Integer.toString(addedAlertsCount),
                "Findings Added", LumoStyles.Color.Error._100
        );

        FlexBoxLayout card = new FlexBoxLayout(findingsAdded);
        if (addedAlertsCount > 0) card.add(createAddedAlertsGrid(addedAlerts));
        card.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
        card.setBoxSizing(BoxSizing.BORDER_BOX);
        card.setDisplay(Display.BLOCK);
        card.setMargin(Top.XL, Bottom.XL);
        card.setMaxWidth(ScanDetails.MAX_WIDTH);
        card.setPadding(Horizontal.RESPONSIVE_L);
        card.setSizeFull();
        return card;
    }

    private List<Alert> findAlertsAdded(List<Alert> commonAlerts) {
        if (commonAlerts != null) {
            List<Alert> alertsAdded =
                    new ArrayList<>(scanResults.getZapResults().getSite().get(0).getAlerts());

            for (Alert alert : scanResults.getZapResults().getSite().get(0).getAlerts())
                for (Alert commonAlert : commonAlerts)
                    if (alert.equals(commonAlert))
                        alertsAdded.remove(alert);
            return alertsAdded;
        } else
            return null;
    }

    private Details createAddedAlertsGrid(List<Alert> addedAlerts) {
        SecurityGrid addedAlertsGrid = new SecurityGrid(addedAlerts);

        Details details =
                new Details(
                        "View Details",
                        addedAlertsGrid
                );
        details.setOpened(true);
        return details;
    }

    private FlexBoxLayout createFindingsFixed(List<Alert> commonAlerts) {
        List<Alert> removedAlerts = findAlertsRemoved(commonAlerts);
        int removedAlertsCount = 0;
        if (removedAlerts != null) removedAlertsCount = removedAlerts.size();
        ListItem findingsAdded = UIUtils.createFindingsItem(
                VaadinIcon.TOOLS,Integer.toString(removedAlertsCount),
                "Findings Fixed", LumoStyles.Color.Success._100
        );

        FlexBoxLayout card = new FlexBoxLayout(findingsAdded);
        if (removedAlertsCount > 0) card.add(createRemovedAlertsGrid(removedAlerts));
        card.setAlignItems(FlexComponent.Alignment.CENTER);
        card.setBoxSizing(BoxSizing.BORDER_BOX);
        card.setDisplay(Display.BLOCK);
        card.setMargin(Top.XL, Bottom.XL);
        card.setMaxWidth(ScanDetails.MAX_WIDTH);
        card.setPadding(Horizontal.RESPONSIVE_L);
        card.setSizeFull();
        return card;
    }

    private List<Alert> findAlertsRemoved(List<Alert> commonAlerts) {
        if (commonAlerts != null) {
            List<Alert> alertsRemoved =
                    new ArrayList<>(previousScanResults.getZapResults().getSite().get(0).getAlerts());

            for (Alert alert : previousScanResults.getZapResults().getSite().get(0).getAlerts())
                for (Alert commonAlert : commonAlerts)
                    if (alert.equals(commonAlert))
                        alertsRemoved.remove(alert);
            return alertsRemoved;
        } else
            return null;

    }

    private Details createRemovedAlertsGrid(List<Alert> removedAlerts) {
        SecurityGrid removedAlertsGrid = new SecurityGrid(removedAlerts);
        Details details =
                new Details(
                        "View Details",
                        removedAlertsGrid
                );
        details.setOpened(true);
        return details;
    }

}
