package com.pi.server.ui.views;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.services.ScanService;
import com.pi.server.backend.services.UserService;
import com.pi.server.security.SecurityUtils;
import com.pi.server.ui.MainLayout;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.ScanLog;
import com.pi.server.ui.layout.size.*;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.ChartUtils;
import com.pi.server.ui.util.LumoStyles;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.*;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;

import java.util.List;

@CssImport("./styles/views/reports.css")
@Route(value = AppConst.PAGE_REPORTS, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_REPORTS + " | " + AppConst.APP_NAME)
public class Reports extends ViewFrame {


	private final ScanService scanService;
	private final long userId;

	private static final String CLASS_NAME = "reports";
	private final List<Scan> scans;


	public Reports(UserService userService, ScanService scanService)
	{
		this.scanService = scanService;
		this.userId = userService.getUserByUsername(SecurityUtils.getUsername()).getId();
		scans = scanService.findAllByUserId(userId,null);
		setViewContent(createContent());
	}

	private Component createContent() {
		ScanLog scanLog = new ScanLog(scanService, userId);
		scanLog.setPadding(true);
		FlexBoxLayout content = new FlexBoxLayout(
				createOverview(),
				scanLog
		);
		content.setAlignItems(FlexComponent.Alignment.CENTER);
		content.setFlexDirection(FlexDirection.COLUMN);
		content.setBoxSizing(BoxSizing.BORDER_BOX);
		content.setDisplay(Display.BLOCK);
		content.setPadding(Horizontal.RESPONSIVE_X, Vertical.RESPONSIVE_X);
		content.setWidthFull();
		return content;
	}

	private Component createOverview() {
		FlexBoxLayout overview = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.SLIDERS, "Scan Statuses"),
				createOverviewCharts());
		overview.setBoxSizing(BoxSizing.BORDER_BOX);
		overview.setDisplay(Display.BLOCK);
		overview.setMargin(Top.L);
		overview.setPadding(Horizontal.RESPONSIVE_L);
		overview.setWidthFull();
		return overview;
	}

	private Component createOverviewCharts() {
		Row charts = new Row();
		UIUtils.setBackgroundColor(LumoStyles.Color.BASE_COLOR, charts);
		UIUtils.setBorderRadius(BorderRadius.S, charts);
		UIUtils.setShadow(Shadow.XS, charts);

		for (Scan.Status status : Scan.Status.values()) {
			charts.add(createStatusChart(status));
		}

		return charts;
	}

	private Component createStatusChart(Scan.Status status) {
		int value = 0;
		int total = scans.size();
		switch (status) {
			case PENDING:
				for (Scan scan:scans)
					if(scan.getStatus().equals(Scan.Status.PENDING))
						value++;
				break;
			case RUNNING:
				for (Scan scan:scans)
					if(scan.getStatus().equals(Scan.Status.RUNNING))
						value++;
				break;
			case FINISHED:
				for (Scan scan:scans)
					if(scan.getStatus().equals(Scan.Status.FINISHED))
						value++;
				break;
			case ABORTED:
				for (Scan scan:scans)
					if(scan.getStatus().equals(Scan.Status.ABORTED))
						value++;
				break;
			default:
				value = -1;
				// Error code
				break;
		}

		FlexBoxLayout textContainer = new FlexBoxLayout(
				UIUtils.createH2Label(Integer.toString(value)));
		textContainer.setAlignItems(FlexComponent.Alignment.BASELINE);
		textContainer.setPosition(Position.ABSOLUTE);
		textContainer.setSpacing(Right.XS);

		Component chart;
		if (total!=0)
			chart = ChartUtils.createProgressChart(status, (float) value/total*100);
		else
			chart = ChartUtils.createProgressChart(status, value);

		FlexBoxLayout chartContainer = new FlexBoxLayout(chart, textContainer);
		chartContainer.setAlignItems(FlexComponent.Alignment.CENTER);
		chartContainer
				.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
		chartContainer.setPosition(Position.RELATIVE);
		chartContainer.setHeight("120px");
		chartContainer.setWidth("120px");

		FlexBoxLayout paymentChart = new FlexBoxLayout(
				new Label(status.getName()),
				chartContainer);
		paymentChart.addClassName(CLASS_NAME + "__gauge-chart");
		paymentChart.setAlignItems(FlexComponent.Alignment.CENTER);
		paymentChart.setFlexDirection(FlexDirection.COLUMN);
		paymentChart.setPadding(Bottom.S, Top.M);
		return paymentChart;
	}
}
