package com.pi.server.ui.views.adminSection;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.services.ScanService;
import com.pi.server.ui.MainLayout;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.ListItem;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawer;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawerFooter;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawerHeader;
import com.pi.server.ui.layout.size.Horizontal;
import com.pi.server.ui.layout.size.Right;
import com.pi.server.ui.layout.size.Top;
import com.pi.server.ui.layout.size.Vertical;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.LumoStyles;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.BoxSizing;
import com.pi.server.ui.views.SplitViewFrame;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.radiobutton.RadioButtonGroup;
import com.vaadin.flow.component.radiobutton.RadioGroupVariant;
import com.vaadin.flow.component.select.Select;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import org.springframework.security.access.annotation.Secured;

@Route(value = AppConst.PAGE_SCANS, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_SCANS + " | " + AppConst.APP_NAME)
@Secured("Role.ADMIN")
public class Scans extends SplitViewFrame {

	private final ScanService scanService;

	private Grid<Scan> grid;

	private DetailsDrawer detailsDrawer;
	private DetailsDrawerHeader detailsDrawerHeader;

	private TextField filter;

	public Scans(ScanService scanService) {
		this.scanService = scanService;
		setViewContent(createContent());
		setViewDetails(createDetailsDrawer());
		setViewDetailsPosition(Position.BOTTOM);
	}

	private Component createContent() {
		final HorizontalLayout topLayout = createTopBar();
		final VerticalLayout barAndGridLayout = new VerticalLayout();
		barAndGridLayout.add(topLayout);
		barAndGridLayout.add(createGrid());
		barAndGridLayout.setFlexGrow(1, grid);
		barAndGridLayout.setFlexGrow(0, topLayout);
		barAndGridLayout.setSizeFull();
		barAndGridLayout.expand(grid);

		FlexBoxLayout content = new FlexBoxLayout(barAndGridLayout);
		content.setBoxSizing(BoxSizing.BORDER_BOX);
		content.setHeightFull();
		content.setPadding(Horizontal.RESPONSIVE_X, Top.RESPONSIVE_X);
		return content;
	}

	public HorizontalLayout createTopBar() {
		filter = new TextField();
		filter.setPlaceholder("Filter...");
		filter.setClearButtonVisible(true);
		filter.setValueChangeMode(ValueChangeMode.EAGER);
		// Apply the filter to grid's data provider. TextField value is never
		filter.addValueChangeListener(e -> updateList());

		final HorizontalLayout topLayout = new HorizontalLayout();
		topLayout.setWidth("100%");
		topLayout.add(filter);
		topLayout.setVerticalComponentAlignment(FlexComponent.Alignment.START, filter);
		topLayout.expand(filter);
		return topLayout;
	}

	private Grid createGrid() {
		grid = new Grid<>();
		grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		grid.asSingleSelect().addValueChangeListener(event -> showDetails(event.getValue()));
		updateList();
		grid.setHeightFull();

		grid.addColumn(Scan::getId)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setFrozen(true)
				.setHeader("ID")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createTargetSite))
				.setComparator(Scan::getTargetSite)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Target Site")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createScanInfo))
				.setComparator(Scan::getJavaFileName)
				.setAutoWidth(true)
				.setFlexGrow(1)
				.setHeader("Scan File")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createBrowserType))
				.setComparator(Scan::getBrowserType)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Browser Type")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createBrowserMode))
				.setComparator(Scan::getHeadlessMode)
				.setAutoWidth(true)
				.setTextAlign(ColumnTextAlign.CENTER)
				.setFlexGrow(0)
				.setHeader("Browser Mode")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createZapOptions))
				.setComparator(Scan::getZapOptions)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("ZAP Options")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createStatus))
				.setComparator(Scan::getStatus)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Status")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createDate))
				.setComparator(Scan::getCreationDateTime)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Request Timestamp")
				.setTextAlign(ColumnTextAlign.START)
				.setSortable(true);
		grid.addColumn(Scan::getUserId)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("User ID")
				.setTextAlign(ColumnTextAlign.START)
				.setSortable(true);

		return grid;
	}

	private Component createTargetSite(Scan scan) {
		return new Html("<span><b>" + scan.getTargetSite() + "</b></span>");
	}

	private Component createScanInfo(Scan scan) {
		ListItem item = new ListItem(
				scan.getJavaFileName(),
				scan.getJavaFilePath()
		);
		item.setPadding(Vertical.XS);
		item.setSpacing(Right.M);
		return item;
	}

	private Component createBrowserType(Scan scan) {
		String browserType = scan.getBrowserType().toString();
		ListItem item = new ListItem(browserType);
		item.setPadding(Vertical.XS);
		item.setPrefix(new Image(getBrowserIconPath(browserType), browserType + " logo"));
		item.setSpacing(Right.S);
		return item;
	}

	private String getBrowserIconPath(String browserType) {
		return UIUtils.IMG_PATH + "logos/browsers/" + browserType.toLowerCase()
				+ "-icon.png";
	}

	private Component createBrowserMode(Scan scan) {
		Icon icon;
		if (scan.getHeadlessMode().equals(Scan.BrowserMode.OFF)) {
			icon = UIUtils.createPrimaryIcon(VaadinIcon.EYE);
		} else {
			icon = UIUtils.createSecondaryIcon(VaadinIcon.EYE_SLASH);
		}
		return icon;
	}

	private Component createZapOptions(Scan scan) {
		String zapOptions = scan.getZapOptions();
		zapOptions = zapOptions.substring(1, zapOptions.length()-1);
		String[] parts = zapOptions.split("\\s*,\\s*");
		ListItem item = new ListItem(
		"Amount of options: " + parts.length
		);
		item.setSecondaryText(zapOptions);
		item.setPadding(Vertical.XS);
		item.setSpacing(Right.XS);
		return item;
	}

	private Component createStatus(Scan scan) {
		Icon icon;
		if (scan.getStatus().equals(Scan.Status.PENDING)) {
			icon = UIUtils.createSecondaryIcon(VaadinIcon.HOURGLASS);
		} else if (scan.getStatus().equals(Scan.Status.RUNNING)) {
			icon = UIUtils.createPrimaryIcon(VaadinIcon.START_COG);
		} else if (scan.getStatus().equals(Scan.Status.FINISHED)) {
			icon = UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O);
		} else {
			icon = UIUtils.createErrorIcon(VaadinIcon.WARNING);
		}
		return icon;
	}

	private Component createDate(Scan scan) {
		return new Span(UIUtils.formatDateTime(scan.getCreationDateTime()));
	}

	private DetailsDrawer createDetailsDrawer() {
		detailsDrawer = new DetailsDrawer(DetailsDrawer.Position.BOTTOM);

		// Header
		detailsDrawerHeader = new DetailsDrawerHeader("");
		detailsDrawerHeader.addCloseListener(buttonClickEvent -> detailsDrawer.hide());
		detailsDrawer.setHeader(detailsDrawerHeader);

		// Footer
		DetailsDrawerFooter footer = new DetailsDrawerFooter();
		footer.addSaveListener(e -> {
			detailsDrawer.hide();
			UIUtils.showNotification("Changes saved.");
		});
		footer.addResetListener(e -> detailsDrawer.hide());
		detailsDrawer.setFooter(footer);

		return detailsDrawer;
	}

	private void showDetails(Scan scan) {
		detailsDrawerHeader.setTitle("Scan ID : "+ scan.getId() + " of User : " + scan.getUserId());
		detailsDrawer.setContent(createDetails(scan));
		detailsDrawer.show();
	}

	private FormLayout createDetails(Scan scan) {
		TextField filePath = new TextField();
		filePath.setValue(scan.getJavaFilePath());
		filePath.setWidthFull();

		TextField fileName = new TextField();
		fileName.setValue(scan.getJavaFileName());
		fileName.setWidthFull();

		Select<Scan.BrowserType> browserSelect = new Select<>();
		browserSelect.setItems(Scan.BrowserType.values());
		browserSelect.setValue(scan.getBrowserType());

		RadioButtonGroup<Scan.BrowserMode> browserMode = new RadioButtonGroup<>();
		browserMode.addThemeVariants(RadioGroupVariant.LUMO_VERTICAL);
		browserMode.setItems(Scan.BrowserMode.values());
		browserMode.setValue(scan.getHeadlessMode());

		RadioButtonGroup<Scan.Status> status = new RadioButtonGroup<>();
		status.addThemeVariants(RadioGroupVariant.LUMO_VERTICAL);
		status.setItems(Scan.Status.values());
		status.setValue(scan.getStatus());
		// Form layout
		FormLayout form = new FormLayout();
		form.addClassNames(LumoStyles.Padding.Bottom.L,
				LumoStyles.Padding.Horizontal.L, LumoStyles.Padding.Top.S);
		form.setResponsiveSteps(
				new FormLayout.ResponsiveStep("0", 1,
						FormLayout.ResponsiveStep.LabelsPosition.TOP),
				new FormLayout.ResponsiveStep("600px", 2,
						FormLayout.ResponsiveStep.LabelsPosition.TOP),
				new FormLayout.ResponsiveStep("1024px", 3,
						FormLayout.ResponsiveStep.LabelsPosition.TOP));
		form.addFormItem(filePath, "Java File Path");
		form.addFormItem(fileName, "Java File Name");
		form.addFormItem(browserSelect, "Browser Type");
		form.addFormItem(browserMode, "Browser Mode");
		form.addFormItem(status, "Status");
		UIUtils.setColSpan(2, filePath, fileName);
		UIUtils.setColSpan(3, browserSelect, browserMode, status);
		return form;
	}

	private void updateList() {
		grid.setItems(scanService.findAll(filter.getValue()));
	}
}
