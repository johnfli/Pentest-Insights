package com.pi.server.ui.views;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.services.ScanService;
import com.pi.server.backend.services.UserService;
import com.pi.server.security.SecurityUtils;
import com.pi.server.ui.MainLayout;
import com.pi.server.ui.components.BrandLogo;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.ScanForm;
import com.pi.server.ui.layout.size.Bottom;
import com.pi.server.ui.layout.size.Horizontal;
import com.pi.server.ui.layout.size.Uniform;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.FlexDirection;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H4;
import com.vaadin.flow.component.html.H5;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.progressbar.ProgressBar;
import com.vaadin.flow.component.progressbar.ProgressBarVariant;
import com.vaadin.flow.router.*;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@Route(value = AppConst.PAGE_HOME, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_HOME + " | " + AppConst.APP_NAME)
@CssImport("./styles/styles.css")
public class Home extends ViewFrame implements BeforeLeaveObserver {

	private final UserService userService;
	private final ScanService scanService;

	private Div progressDiv;
	private ProgressBar progressBar;
	private ExecutorService executor;

	private ScanForm scanForm;

	public Home(UserService userService, ScanService scanService) {
		this.userService = userService;
		this.scanService = scanService;
		setId("home");
		setViewContent(createContent());
	}

	private Component createContent() {

		scanForm = new ScanForm(userService.getUserByUsername(SecurityUtils.getUsername()).getId());
		scanForm.addListener(ScanForm.TestAppEvent.class, this::saveScan);
		scanForm.addListener(ScanForm.ClearEvent.class, event -> { /* Do nothing */ });

		createProgressDiv();
		FlexBoxLayout content = new FlexBoxLayout(
				createHeader(),
				scanForm,
				progressDiv
		);
		content.addComponentAsFirst(UIUtils.createH3Label("Hello " +
				userService.getUserByUsername(SecurityUtils.getUsername()).getFirstName()
					+ ", let's scan!"));
		content.setAlignItems(FlexComponent.Alignment.CENTER);
		content.setFlexDirection(FlexDirection.COLUMN);
		content.setMargin(Horizontal.AUTO, Bottom.XL);
		content.setMaxWidth("840px");
		content.setPadding(Uniform.XS);
		content.setSpacing(Uniform.S);
		return content;
	}

	private void saveScan(ScanForm.TestAppEvent event) {
		scanService.save(event.getScan());

		if(!progressDiv.isVisible()) {
			progressDiv.setVisible(true);
			executor = Executors.newCachedThreadPool();
		}
		progressDiv.add(createProgressSpan(event.getScan()));

	}

	private void updateProcessing(Float percentage) {
		this.getUI().ifPresent(ui -> ui.access(() -> {
			if (progressBar.isIndeterminate()) progressBar.setIndeterminate(false);
			if (scanForm.isScanningAlready()) progressBar.setValue(percentage);
		}));
	}

	private void createProgressDiv() {
		progressDiv = new Div();
		progressDiv.setWidth("75%");
		progressDiv.setTitle("Scanning in a background process");
		progressDiv.add(new H5("Scanning in a background process"));
		progressDiv.setVisible(false);
	}

	private Span createProgressSpan(Scan scan) {
		Span progressSpan = new Span();
		progressBar = new ProgressBar();
		progressBar.setIndeterminate(true);
		scanForm.setScanningAlready(true);
		progressSpan.add(
				new Html("<span> Scan for the file with name: <i>" + scan.getJavaFileName() + "</i></span>"),
				progressBar
		);
		executor.submit(() -> {
			scanService.simulateProgress(scan, this::updateProcessing);
			this.getUI().ifPresent(ui -> ui.access(() -> {
				if (scanForm.isScanningAlready())
					progressBar.setIndeterminate(true);
			}));

		});

		executor.submit(() -> {
			scanService.testApp(scan);
			this.getUI().ifPresent(ui -> ui.access(() -> {
				progressBar.setIndeterminate(false);
				progressBar.setValue((float) 1);
				if (scan.isFinished()) {
					UIUtils.showNotification("Scanning finished!", NotificationVariant.LUMO_SUCCESS);
					progressBar.addThemeVariants(ProgressBarVariant.LUMO_SUCCESS);
					progressSpan.add(
							new Html("<span>You may find an overview of your scanning results in the " +
									"<a router-link href=\"" + AppConst.PAGE_DASHBOARD + "\">" + AppConst.TITLE_DASHBOARD +
									"</a> section.</br>" +
									"Alternatively, you may find the analytical results of your scanning in the " +
									"<a router-link href=\"scan-details/" + scan.getId() + "\">equivalent scan-details</a> page.</br>" +
									"</span>")
					);
				} else {
					UIUtils.showNotification("Scanning aborted!", NotificationVariant.LUMO_ERROR);
					progressBar.addThemeVariants(ProgressBarVariant.LUMO_ERROR);
					progressSpan.add(
							new Html("<span><b>Scanning aborted!</b> Please check that everything is " +
									"configured correctly and try again.</br></span>")
					);
				}
				scanForm.setScanningAlready(false);
			}));
		});
		return progressSpan;
	}

	private Component createHeader() {

		VerticalLayout header = new VerticalLayout();
		header.setAlignItems(FlexComponent.Alignment.CENTER);

		H4 secondaryHeader = new H4("Security Testing made easy");

		Html paragraph = new Html(
				"<center>Do you have <b>Functional Tests</b> for your Web Application?<br>" +
						"That's all you need to conduct a <b>Security Vulnerability Scan</b>, as well.</center>"
		);

		header.add(
				new BrandLogo("pentest insights", "CYBER SECURITY TOOL", false),
				secondaryHeader,
				paragraph
		);
		return header;
	}

	@Override
	public void beforeLeave(BeforeLeaveEvent event) {
		if (progressDiv.isVisible() && progressBar.getValue()!=1.0) {
			BeforeLeaveEvent.ContinueNavigationAction action = event.postpone();
			ConfirmDialog leaveDialog = new ConfirmDialog();
			leaveDialog.setHeader("Scan is about to be canceled");
			String textHtml = "<p>Are you sure you want to <b>leave</b> this <b>page</b>?</br>" +
					"If you <b>leave</b> your scan will be <b>canceled</b>.</p>";
			leaveDialog.setText(new Html(textHtml).getElement());
			Button stayButton = new Button("Stay", e -> leaveDialog.close());
			stayButton.addThemeVariants(ButtonVariant.LUMO_SUCCESS, ButtonVariant.LUMO_PRIMARY);
			stayButton.setIcon(VaadinIcon.PLAY_CIRCLE.create());
			stayButton.addClickShortcut(Key.ESCAPE);
			leaveDialog.setRejectButton(stayButton.getElement());
			Button leaveButton = new Button("Leave", e -> {
				action.proceed();
				leaveDialog.close();
			});
			leaveButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_PRIMARY);
			leaveButton.setIcon(VaadinIcon.EXIT.create());
			leaveButton.addClickShortcut(Key.ENTER);
			leaveDialog.setConfirmButton(leaveButton.getElement());
			leaveDialog.open();
		}
	}

	@Override
	protected void onDetach(DetachEvent detachEvent) {
		super.onDetach(detachEvent);
		if (progressDiv.isVisible()) {
			executor.shutdown();
			try {
				if (!executor.awaitTermination(800, TimeUnit.MILLISECONDS)) {
					executor.shutdownNow();
				}
			} catch (InterruptedException e) {
				executor.shutdownNow();
			}
		}
	}
}

