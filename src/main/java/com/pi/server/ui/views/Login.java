package com.pi.server.ui.views;

import com.pi.server.backend.entities.UserDto;
import com.pi.server.backend.services.UserService;
import com.pi.server.ui.components.BrandLogo;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.WhatWeDo;
import com.pi.server.ui.layout.size.Bottom;
import com.pi.server.ui.layout.size.Right;
import com.pi.server.ui.layout.size.Top;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.LumoStyles;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.Overflow;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.dependency.JsModule;
import com.vaadin.flow.component.dependency.NpmPackage;
import com.vaadin.flow.component.dependency.StyleSheet;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.PasswordField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.validator.EmailValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.dom.Element;
import com.vaadin.flow.router.BeforeEnterEvent;
import com.vaadin.flow.router.BeforeEnterObserver;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;

import java.util.Collections;

@Route("login")
@PageTitle(AppConst.TITLE_LOGIN + " | " + AppConst.APP_NAME)
@StyleSheet("http://fonts.googleapis.com/css?family=Roboto")
@StyleSheet("https://fonts.googleapis.com/css?family=Lato&display=swap")
@NpmPackage(value = "@polymer/iron-form", version = "3.0.1")
@JsModule("@polymer/iron-form/iron-form.js")
public class Login extends VerticalLayout implements BeforeEnterObserver {

    Button registerOrLogin = UIUtils.createLargeButton(
            "Login or create an account today",
            VaadinIcon.SIGN_IN
    );
    /*** Login Components ***/
    private final FormLayout loginForm = new FormLayout();
    private Dialog loginDialog;
    PasswordField passwordField;
    private final Button registerButton = new Button("Don't have an account? Create now.");
    /*** Register Components ***/
    private FormLayout registrationForm;
    private Dialog registerDialog;
    private Label registerDialogTitle;
    private Button createAccount;
    private final Binder<UserDto> binder = new Binder<>(UserDto.class);
    private final UserDto user;
    private TextField email;
    private Checkbox emailUpdates;
    private TextField username;
    private Label infoLabel;
    /*** Forgot Password Components ***/
    private Dialog forgotPasswordDialog;
    /*** Terms and Conditions Components ***/
    private Dialog termsDialog;

    private final UserService userService;

    public Login(UserService userService) {
        this.user = new UserDto();
        this.userService = userService;
        createForgoPasswordDialog();
        createRegisterDialog();
        createLoginDialog();
        createContent();
    }

    private void createContent() {

        UIUtils.setOverflow(Overflow.AUTO, this);
        setSizeFull();
        setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
        setAlignItems(FlexComponent.Alignment.CENTER);
        setSpacing(false);
        setPadding(false);
        setMargin(false);
        getStyle().set("display", "block");

        add(
                createLogo(),
                new WhatWeDo(),
                createRegisterOrLoginButton()
        );
    }

    private Component createLogo() {
        Div logo = new BrandLogo("pentest insights", "CYBER SECURITY TOOL", false);

        FlexBoxLayout wrapper = new FlexBoxLayout(logo);
        wrapper.setWidthFull();
        wrapper.setJustifyContentMode(JustifyContentMode.CENTER);
        wrapper.setPadding(Top.RESPONSIVE_L);
        return wrapper;
    }

    private Component createRegisterOrLoginButton() {

        registerOrLogin.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        registerOrLogin.addClickListener(event -> loginDialog.open());

        FlexBoxLayout wrapper = new FlexBoxLayout(registerOrLogin);
        wrapper.setWidthFull();
        wrapper.setJustifyContentMode(JustifyContentMode.CENTER);
        wrapper.setPadding(Bottom.RESPONSIVE_L);
        return wrapper;
    }

    private void createLoginDialog() {
        loginDialog = new Dialog();

        loginDialog.setCloseOnEsc(true);
        loginDialog.setCloseOnOutsideClick(true);
        Label loginDialogTitle = UIUtils.createH4Label("Login/Register");

        VerticalLayout loginWrapper = new VerticalLayout(
                new BrandLogo("pentest insights", "CYBER SECURITY TOOL", true),
                createLoginForm()
        );
        loginWrapper.setJustifyContentMode(FlexComponent.JustifyContentMode.CENTER);
        loginWrapper.setAlignItems(FlexComponent.Alignment.CENTER);
        loginWrapper.setSpacing(false);
        loginWrapper.setPadding(false);
        loginWrapper.setMargin(false);

        loginDialog.add(
                createDialogHeader(loginDialog, loginDialogTitle),
                loginWrapper
        );
    }

    private Component createLoginForm() {
        TextField userNameTextField = new TextField("Username");
        userNameTextField.getElement().setAttribute("name", "username");
        userNameTextField.setInvalid(true);
        userNameTextField.setValue("");
        userNameTextField.setAutofocus(true);
        userNameTextField.setRequired(true);

        passwordField = new PasswordField("Password");
        passwordField.getElement().setAttribute("name", "password");
        passwordField.setInvalid(true);
        passwordField.setValue("");
        passwordField.setRequired(true);

        Checkbox rememberMe = new Checkbox("Remember Me");
        rememberMe.getStyle().set("cursor", "pointer");
        rememberMe.getElement().setAttribute("name", "remember-me");

        Button loginButton = new Button("Log in");
        loginButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        loginButton.getStyle().set("cursor", "pointer");
        loginButton.addFocusShortcut(Key.ENTER);
        loginButton.addClickShortcut(Key.ENTER); // .listenOn(loginForm);
        loginButton.setId("login");
        loginButton.getElement().setAttribute("onfocus",
                "document.getElementById('ironform').submit();");

        Button forgotPasswordButton = new Button("Forgot password");
        forgotPasswordButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        forgotPasswordButton.getStyle().set("cursor", "pointer");
        forgotPasswordButton.addClickListener(event -> forgotPasswordDialog.open());

        registerButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        registerButton.getStyle().set("cursor", "pointer");
        registerButton.addClickListener(event -> registerDialog.open());

        loginForm.add(
                userNameTextField,
                passwordField,
                rememberMe,
                loginButton,
                forgotPasswordButton,
                registerButton
        );
        loginForm.setMaxWidth("21em");
        loginForm.addClassNames(LumoStyles.Padding.Bottom.L,
                LumoStyles.Padding.Horizontal.S, LumoStyles.Padding.Top.L);

        Element formElement = new Element("form");
        formElement.setAttribute("method", "post");
        formElement.setAttribute("action", "login");
        formElement.appendChild(loginForm.getElement());

        Element ironForm = new Element("iron-form");
        ironForm.setAttribute("id", "ironform");
        ironForm.setAttribute("allow-redirect", true);
        ironForm.appendChild(formElement);

        setClassName("login-view");

        FlexBoxLayout formWrapper = new FlexBoxLayout();
        formWrapper.addClassNames(LumoStyles.Padding.Bottom.L,
                LumoStyles.Padding.Horizontal.S, LumoStyles.Padding.Top.L);

        formWrapper.getElement().appendChild(ironForm);
        return formWrapper;
    }

    private void createRegisterDialog() {
        registerDialog = new Dialog();

        registerDialog.setCloseOnEsc(true);
        registerDialog.setCloseOnOutsideClick(true);
        registerDialogTitle = UIUtils.createH4Label("Creating a new account");

        registerDialog.add(
                createDialogHeader(registerDialog, registerDialogTitle),
                createRegistrationForm()
        );
    }

    private void createForgoPasswordDialog() {
        forgotPasswordDialog = new Dialog();

        forgotPasswordDialog.setCloseOnEsc(true);
        forgotPasswordDialog.setCloseOnOutsideClick(true);

        forgotPasswordDialog.add(
                new Label("Forgot Password functionality is Under Construction")
        );
    }

    private Component createDialogHeader(Dialog dialog, Label dialogTitle) {
        Button close;
        close = UIUtils.createTertiaryInlineButton(VaadinIcon.CLOSE);
        close.addClickListener(buttonClickEvent -> dialog.close());
        close.getStyle().set("cursor", "pointer");
        UIUtils.setLineHeight("1", close);

        FlexBoxLayout dialogHeader = new FlexBoxLayout(dialogTitle, close);
        dialogHeader.setAlignSelf(Alignment.START, dialogTitle);
        dialogHeader.setFlexGrow(1, dialogTitle);
        dialogHeader.setFlexGrow(0, close);
        dialogHeader.setAlignSelf(Alignment.END, close);

        return dialogHeader;
    }

    private FormLayout createRegistrationForm() {
        TextField firstName = new TextField();
        firstName.setPlaceholder("Enter your first name");
        firstName.setWidthFull();
        firstName.setValueChangeMode(ValueChangeMode.EAGER);
        firstName.setRequired(true);
        firstName.setRequiredIndicatorVisible(true);
        firstName.setAutofocus(true);
        firstName.setInvalid(true);

        TextField lastName = new TextField();
        lastName.setPlaceholder("Enter your last name");
        lastName.setWidthFull();
        lastName.setValueChangeMode(ValueChangeMode.EAGER);
        lastName.setRequired(true);
        lastName.setRequiredIndicatorVisible(true);
        lastName.setInvalid(true);

        firstName.addValueChangeListener(e ->
                registerDialogTitle.setText("Creating a new account for " + e.getValue() + " " + lastName.getValue()));
        lastName.addValueChangeListener(e ->
                registerDialogTitle.setText("Creating a new account for " + firstName.getValue() + " " + e.getValue()));

        username = new TextField();
        username.setPlaceholder("Pick a username");
        username.setWidthFull();
        username.setValueChangeMode(ValueChangeMode.EAGER);
        username.setRequired(true);
        username.setInvalid(true);


        email = new TextField();
        email.setPlaceholder("Enter your email");
        email.setWidthFull();
        email.setRequiredIndicatorVisible(true);
        email.setRequired(true);
        email.setValueChangeMode(ValueChangeMode.EAGER);
        email.setInvalid(true);
        emailUpdates = new Checkbox("E-mail me scan results");
        Div emailDiv = new Div();
        emailDiv.add(email, emailUpdates);

        PasswordField password = new PasswordField();
        password.setPlaceholder("Pick a password");
        password.setWidthFull();
        password.setValueChangeMode(ValueChangeMode.EAGER);
        password.setRequired(true);
        password.setRequiredIndicatorVisible(true);
        password.setInvalid(true);

        PasswordField matchingPassword = new PasswordField();
        matchingPassword.setPlaceholder("Repeat password");
        matchingPassword.setWidthFull();
        matchingPassword.setValueChangeMode(ValueChangeMode.EAGER);
        matchingPassword.setRequired(true);
        matchingPassword.setRequiredIndicatorVisible(true);
        matchingPassword.setInvalid(true);

        createTermsDialog();
        Button termsButton = UIUtils.createTertiaryInlineButton("By clicking Register you agree to our" +
                " Terms and Privacy Policy.");
        termsButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY_INLINE);
        termsButton.getStyle().set("cursor", "pointer");
        termsButton.addClickListener(e -> termsDialog.open());
        // Form layout
        registrationForm = new FormLayout();
        registrationForm.addClassNames(LumoStyles.Padding.Bottom.L,
                LumoStyles.Padding.Horizontal.L, LumoStyles.Padding.Top.S);
        registrationForm.setResponsiveSteps(
                new FormLayout.ResponsiveStep("0", 1,
                        FormLayout.ResponsiveStep.LabelsPosition.TOP),
                new FormLayout.ResponsiveStep("21em", 2,
                        FormLayout.ResponsiveStep.LabelsPosition.TOP));
        registrationForm.addFormItem(firstName, "First Name");
        registrationForm.addFormItem(lastName, "Last Name");
        FormLayout.FormItem emailItem = registrationForm.addFormItem(emailDiv, "Email");
        FormLayout.FormItem usernameItem = registrationForm.addFormItem(username, "Username");
        FormLayout.FormItem passwordItem = registrationForm.addFormItem(password, "Password");
        FormLayout.FormItem matchingPasswordItem = registrationForm.addFormItem(matchingPassword, "Repeat Password");
        FormLayout.FormItem termsItem = registrationForm.addFormItem(termsButton, "");
        FormLayout.FormItem buttonsItem = registrationForm.addFormItem(createFormButtons(), createInfoLabel());
        UIUtils.setColSpan(2, emailItem, emailUpdates, usernameItem,
                passwordItem, matchingPasswordItem, termsItem, buttonsItem);
        // Bind form fields
        binder.forField(firstName)
                .asRequired("First Name is required")
                .withValidator(new StringLengthValidator(
                        "Please add a First Name of 2 or more characters", 2, null))
                .bind(UserDto::getFirstName, UserDto::setFirstName);
        binder.forField(lastName)
                .asRequired("Last Name is required")
                .withValidator(new StringLengthValidator(
                        "Please add a Last Name of 2 or more characters", 2, null))
                .bind(UserDto::getLastName, UserDto::setLastName);
        binder.forField(email)
                .asRequired("Email is required")
                .withValidator(new EmailValidator("Not valid email address"))
                .bind(UserDto::getEmail, UserDto::setEmail);
        binder.forField(username)
                .asRequired("Username is required")
                .withValidator(new StringLengthValidator(
                        "Please add a username of 5 or more characters", 5, 30))
                .bind(UserDto::getUsername, UserDto::setUsername);
        binder.forField(password)
                .asRequired("Password is required")
                .withValidator(pass -> pass.matches("^(|(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,})$"),
                        "Password should consist of 8 or more chars, mixing digits, lowercase and uppercase letters")
                .bind(UserDto::getPassword, UserDto::setPassword);
        binder.forField(matchingPassword)
                .asRequired("Repeated password is required")
                .withValidator(pass -> pass.matches("\\b" + password.getValue() + "\\b"),
                        "Passwords don't match")
                .bind(UserDto::getPassword, UserDto::setPassword);
        binder.addValueChangeListener(event -> createAccount.setEnabled(binder.isValid()));
        binder.setBean(user);

        return registrationForm;
    }

    private void createTermsDialog() {
        termsDialog = new Dialog();
        termsDialog.setCloseOnEsc(true);
        termsDialog.setCloseOnOutsideClick(true);
        Label termsDialogTitle = UIUtils.createH2Label("Terms and Conditions");

        Button agree = UIUtils.createPrimaryButton("Agree to Terms and Conditions");
        agree.getStyle().set("cursor", "pointer");
        agree.addClickListener(event -> termsDialog.close());
        agree.addClickShortcut(Key.ENTER).listenOn(termsDialog);

        termsDialog.add(
                createDialogHeader(termsDialog, termsDialogTitle),
                AppConst.TERMS_AND_CONDITIONS,
                agree
        );
    }

    private Component createInfoLabel() {
        infoLabel = new Label();
        infoLabel.getStyle().set("color", "red");
        infoLabel.setText("");
        return infoLabel;
    }

    private Component createFormButtons() {
        FlexBoxLayout dialogFooter = new FlexBoxLayout();

        createAccount = UIUtils.createPrimaryButton("Create Account");
        createAccount.setEnabled(false);
        createAccount.getStyle().set("cursor", "pointer");
        createAccount.addClickListener(event -> {
            if (binder.isValid() && userService.emailAndUsernameValid(email.getValue(), username.getValue())) {
                userService.registerNewUser(user);
                infoLabel.setText("");
                UIUtils.showNotification("User Registered successfully.", NotificationVariant.LUMO_SUCCESS);
                registerDialog.close();
            } else {
                infoLabel.setText("Email or username already exists. " +
                        "Please change try another combination " +
                        "or if you already have an account you can Reset you password.");
            }

        });
        createAccount.addClickShortcut(Key.ENTER).listenOn(registrationForm);

        Button reset;
        reset = UIUtils.createTertiaryButton("Reset");
        reset.setIcon(VaadinIcon.REFRESH.create());
        reset.getStyle().set("cursor", "pointer");
        reset.addClickListener(event -> {
            binder.setBean(new UserDto());
            infoLabel.setText("");
            emailUpdates.setValue(false);
            createAccount.setEnabled(false);
        });

        dialogFooter.setSpacing(Right.S);
        dialogFooter.add(createAccount, reset);

        return dialogFooter;
    }

    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        if(
                !event.getLocation()
                        .getQueryParameters()
                        .getParameters()
                        .getOrDefault("error", Collections.emptyList())
                        .isEmpty())
        {
            passwordField.setErrorMessage("Incorrect username or password");
            loginDialog.open();
        } else {
            passwordField.setErrorMessage("");
        }
    }
}


