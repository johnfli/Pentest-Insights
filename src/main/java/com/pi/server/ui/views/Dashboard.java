package com.pi.server.ui.views;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.entities.scanResults.ScanResults;
import com.pi.server.backend.entities.scanResults.zap.ZapResults;
import com.pi.server.backend.services.ScanService;
import com.pi.server.backend.services.UserService;
import com.pi.server.security.SecurityUtils;
import com.pi.server.ui.MainLayout;
import com.pi.server.ui.components.FindingsSection;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.layout.size.*;
import com.pi.server.ui.util.*;
import com.pi.server.ui.util.css.*;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.Html;
import com.vaadin.flow.component.board.Row;
import com.vaadin.flow.component.charts.model.DataSeries;
import com.vaadin.flow.component.charts.model.DataSeriesItem;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@CssImport("./styles/views/dashboard.css")
@Route(value = AppConst.PAGE_DASHBOARD, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_DASHBOARD + " | " + AppConst.APP_NAME)
public class Dashboard extends ViewFrame {
	private final ScanService scanService;

	public static final String MAX_WIDTH = "1440px";

	private final long userId;
	private int scanResultsSize = 0;
	List<Scan> scans;
	private List<ScanResults> scanResults;

	public Dashboard(UserService userService, ScanService scanService)
	{
		this.scanService = scanService;
		this.userId = userService.getUserByUsername(SecurityUtils.getUsername()).getId();
		setViewScans();
		setViewContent(createContent());
	}

	private void setViewScans() {
		scans = scanService.findAllByUserId(userId, null);
		scanResults = new ArrayList<>();
		for (Scan scan: scans) {
			if (scan.isFinished()) {
				try {
					scanResults.add(scan.getScanResults());
				} catch (JAXBException e) {
					System.out.println("JAXBException : ");
					e.printStackTrace();
				} catch (IOException e) {
					System.out.println("IOException : ");
					e.printStackTrace();
				}
			}
		}
		scanResultsSize = scanResults.size();
	}

	private Component createContent() {

		FlexBoxLayout content;
		if (scanResultsSize > 0) {
			Component boards = createBoards();
			Component info = createInfo();
			Component history = createHistory();
			content = new FlexBoxLayout(boards, info, history);
			// If we have at least two scans we want to create a Comparative Findings Section
			// between the first ever and the most recent to show the progress
			if (scanResultsSize > 1)
				content.add(createFindingsSection());
		} else
			content = new FlexBoxLayout(createEmptyContent());

		content.setAlignItems(FlexComponent.Alignment.CENTER);
		content.setFlexDirection(FlexDirection.COLUMN);
		content.setSizeFull();
		return content;
	}

	private Component createEmptyContent() {
		Html info = new Html("<span>Please head back to the <a router-link href=\"" + AppConst.PAGE_HOME + "\">"
				+ AppConst.TITLE_HOME +  "</a> page, submit a new scanning and wait for it to complete.</br>" +
				"Then you may come back to this page (<a router-link href=\"" + AppConst.PAGE_DASHBOARD + "\">" +
				AppConst.TITLE_DASHBOARD + "</a>) and have a quick overview of your results.</span>"
		);

		FlexBoxLayout infoWrapper = new FlexBoxLayout(info);
		infoWrapper.setBoxSizing(BoxSizing.BORDER_BOX);
		infoWrapper.setDisplay(Display.BLOCK);
		infoWrapper.setWidthFull();
		infoWrapper.setBackgroundColor(LumoStyles.Color.BASE_COLOR);
		infoWrapper.setShadow(Shadow.XS);
		infoWrapper.setBorderRadius(BorderRadius.S);
		infoWrapper.setPadding(Uniform.RESPONSIVE_M);

		FlexBoxLayout emptyContent = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.ARROW_BACKWARD, "No Scan Results yet"),
				infoWrapper);
		emptyContent.setBoxSizing(BoxSizing.BORDER_BOX);
		emptyContent.setDisplay(Display.BLOCK);
		emptyContent.setMargin(Vertical.XL, Horizontal.RESPONSIVE_M);
		emptyContent.setMaxWidth(MAX_WIDTH);
		emptyContent.setPadding(Horizontal.RESPONSIVE_L);
		emptyContent.setAlignSelf(FlexComponent.Alignment.CENTER);
		return emptyContent;
	}

	private Component createBoards() {
		Component functionalBoard = createFunctionalBoard();
		Component securityBoard = createSecurityBoard();

		Row boards = new Row(functionalBoard, securityBoard);
		boards.addClassNames(LumoStyles.Margin.Top.M, LumoStyles.Margin.Bottom.L);
		UIUtils.setMaxWidth(MAX_WIDTH, boards);
		boards.setWidthFull();

		return boards;
	}

	private Component createFunctionalBoard() {
		// The Functional Board chart presents the TestNG Results of the most recent scan available.
		int passed = scanResults.get(scanResultsSize-1).getTestNgResults().getPassed();
		int failed = scanResults.get(scanResultsSize-1).getTestNgResults().getFailed();
		int ignored = scanResults.get(scanResultsSize-1).getTestNgResults().getIgnored();
		int skipped = scanResults.get(scanResultsSize-1).getTestNgResults().getSkipped();

		DataSeries series = new DataSeries();
		series.add(new DataSeriesItem("Passed", 	(long) (passed-1), 	2));
		series.add(new DataSeriesItem("Failed", 	(long) failed, 	8));
		series.add(new DataSeriesItem("Ignored", 	(long) ignored,	6));
		series.add(new DataSeriesItem("Skipped", 	(long) skipped,	0));

		FlexBoxLayout functional = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.CLIPBOARD_CHECK, "Functional Testing"),
				ChartUtils.createDonutChart("Functional Testing Overview", series, true));
		functional.setBoxSizing(BoxSizing.BORDER_BOX);
		functional.setDisplay(Display.BLOCK);
		functional.setMargin(Top.XL);
		functional.setMaxWidth(MAX_WIDTH);
		functional.setPadding(Horizontal.RESPONSIVE_L);
		functional.setWidthFull();
		return functional;
	}

	private Component createSecurityBoard() {
		// The Security Board chart presents the ZAP Results of the most recent scan available.
		int[] zapAlertsCount = scanResults.get(scanResultsSize-1).getZapResults().getZapAlertsCount();
		int high = zapAlertsCount[1];
		int medium = zapAlertsCount[2];
		int low = zapAlertsCount[3];
		int info = zapAlertsCount[4];

		DataSeries series = new DataSeries();
		series.add(new DataSeriesItem("High", 		(long) high,	8));
		series.add(new DataSeriesItem("Medium", 		(long) medium, 	3));
		series.add(new DataSeriesItem("Low",			(long) low, 	6));
		series.add(new DataSeriesItem("Informational",(long) info, 	0));

		FlexBoxLayout security = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.SHIELD, "Security Testing"),
				ChartUtils.createDonutChart("Security Testing Overview", series, true));
		security.setBoxSizing(BoxSizing.BORDER_BOX);
		security.setDisplay(Display.BLOCK);
		security.setMargin(Top.XL);
		security.setMaxWidth(MAX_WIDTH);
		security.setPadding(Horizontal.RESPONSIVE_L);
		security.setWidthFull();
		return security;
	}

	private Component createInfo() {
		Html info = new Html("<span>The charts above correspond to the latest finished scan that has been submitted. " +
						"For the analytical results of your scanning, please navigate to the " +
						"<a router-link href=\"scan-details/" + scans.get(scans.size()-1).getId() + "\">equivalent scan-details</a> page.</br>" +
						"</span>"
		);
		UIUtils.setFontWeight(FontWeight.BOLDER, info);

		FlexBoxLayout section = new FlexBoxLayout(info);
		section.setBoxSizing(BoxSizing.BORDER_BOX);
		section.setDisplay(Display.BLOCK);
		section.setMargin(Uniform.RESPONSIVE_M);
		section.setMaxWidth(MAX_WIDTH);
		section.setPadding(Horizontal.RESPONSIVE_L);
		return section;
	}

	private Component createHistory() {
		List<ZapResults> zapResults = new ArrayList<>();
		if (scanResultsSize<13)
			for (ScanResults scanResult:scanResults)
				zapResults.add(scanResult.getZapResults());
		else {
			for (int i = 0; i<12; i++)
				zapResults.add(scanResults
						.get(scanResultsSize-12+i)
						.getZapResults());
		}

		FlexBoxLayout history = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.CHART_3D, "History"),
				ChartUtils.createAreaChart(zapResults));
		history.setBoxSizing(BoxSizing.BORDER_BOX);
		history.setDisplay(Display.BLOCK);
		history.setMargin(Top.XL, Bottom.RESPONSIVE_L);
		history.setMaxWidth(MAX_WIDTH);
		history.setPadding(Horizontal.RESPONSIVE_L);
		history.setWidthFull();
		return history;
	}

	private Component createFindingsSection() {
		FindingsSection findingsSection = new FindingsSection(
				scanResults.get(scanResultsSize-1), // most recent
				scanResults.get(0)					// first ever
		);
		FlexBoxLayout section = new FlexBoxLayout(
				UIUtils.createHeader(VaadinIcon.CROSSHAIRS, "Findings Comparison against First Scan Ever " +
						"(w/ any ZAP Options)"),
				findingsSection);
		section.setBoxSizing(BoxSizing.BORDER_BOX);
		section.setDisplay(Display.BLOCK);
		section.setMargin(Top.XL);
		section.setMaxWidth(MAX_WIDTH);
		section.setPadding(Horizontal.RESPONSIVE_L);
		section.setWidthFull();
		return section;
	}
}
