package com.pi.server.ui.views.adminSection;

import com.pi.server.backend.entities.User;
import com.pi.server.backend.services.UserService;
import com.pi.server.ui.MainLayout;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.ListItem;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawer;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawerFooter;
import com.pi.server.ui.components.detailsdrawer.DetailsDrawerHeader;
import com.pi.server.ui.layout.size.Horizontal;
import com.pi.server.ui.layout.size.Right;
import com.pi.server.ui.layout.size.Top;
import com.pi.server.ui.layout.size.Vertical;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.LumoStyles;
import com.pi.server.ui.util.TextColor;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.BoxSizing;
import com.pi.server.ui.views.SplitViewFrame;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.radiobutton.RadioButtonGroup;
import com.vaadin.flow.component.radiobutton.RadioGroupVariant;
import com.vaadin.flow.component.textfield.PasswordField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.validator.EmailValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import org.springframework.security.access.annotation.Secured;

@Route(value = AppConst.PAGE_ACCOUNTS, layout = MainLayout.class)
@PageTitle(AppConst.TITLE_ACCOUNTS + " | " + AppConst.APP_NAME)
@Secured("Role.ADMIN")
public class Accounts extends SplitViewFrame {

	private final UserService userService;

	private TextField filter;
	private Button addUser;
	private Grid<User> grid;
	private FormLayout form;
	Binder<User> binder = new Binder<>(User.class);

	private DetailsDrawer detailsDrawer;
	private DetailsDrawerHeader detailsDrawerHeader;
	private DetailsDrawerFooter footer;

	public Accounts(UserService userService) {
		this.userService = userService;
		setViewContent(createContent());
		setViewDetails(createDetailsDrawer());
	}

	private Component createContent() {
		final HorizontalLayout topLayout = createTopBar();
		final VerticalLayout barAndGridLayout = new VerticalLayout();
		barAndGridLayout.add(topLayout);
		barAndGridLayout.add(createGrid());
		barAndGridLayout.setFlexGrow(1, grid);
		barAndGridLayout.setFlexGrow(0, topLayout);
		barAndGridLayout.setSizeFull();
		barAndGridLayout.expand(grid);

		FlexBoxLayout content = new FlexBoxLayout(barAndGridLayout);
		content.setBoxSizing(BoxSizing.BORDER_BOX);
		content.setHeightFull();
		content.setPadding(Horizontal.RESPONSIVE_X, Top.RESPONSIVE_X);
		return content;
	}

	public HorizontalLayout createTopBar() {
		filter = new TextField();
		filter.setPlaceholder("Filter by name");
		filter.setClearButtonVisible(true);
		filter.setValueChangeMode(ValueChangeMode.EAGER);
		// Apply the filter to grid's data provider. TextField value is never
		filter.addValueChangeListener(e -> updateList());

		addUser = new Button("Add User");
		// Setting theme variant of new production button to LUMO_PRIMARY that
		// changes its background color to blue and its text color to white
		addUser.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		addUser.setIcon(VaadinIcon.PLUS_CIRCLE.create());
		addUser.addClickListener(click -> addUser());

		final HorizontalLayout topLayout = new HorizontalLayout();
		topLayout.setWidth("100%");
		topLayout.add(filter, addUser);
		topLayout.setVerticalComponentAlignment(FlexComponent.Alignment.START, filter);
		topLayout.expand(filter);
		return topLayout;
	}

	private Grid createGrid() {
		grid = new Grid<>();
		grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		grid.asSingleSelect().addValueChangeListener(event -> editUser(event.getValue()));
		updateList();
		grid.setHeightFull();

		grid.addColumn(User::getId)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setFrozen(true)
				.setHeader("ID")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createUserInfo))
				.setComparator(User::getFirstName)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("User Info")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createUsernames))
				.setComparator(User::getUsername)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Username")
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createPasswords))
				.setAutoWidth(true)
				.setFlexGrow(1)
				.setHeader("Password")
				.setTextAlign(ColumnTextAlign.START);
		grid.addColumn(new ComponentRenderer<>(this::createDate))
				.setComparator(User::getRegistrationDate)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Registration Date")
				.setTextAlign(ColumnTextAlign.START)
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createRole))
				.setComparator(User::getRole)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Role")
				.setTextAlign(ColumnTextAlign.START)
				.setSortable(true);
		grid.addColumn(new ComponentRenderer<>(this::createLocked))
				.setComparator(User::isAccountLocked)
				.setAutoWidth(true)
				.setFlexGrow(0)
				.setHeader("Active")
				.setTextAlign(ColumnTextAlign.START)
				.setSortable(true);

		return grid;
	}

	private void editUser(User user) {
		if(user == null) {
			setUser(null);
			detailsDrawer.hide();
		} else {
			setUser(user);
			showDetails(user);
		}
	}

	private void addUser() {
		grid.asSingleSelect().clear();
		editUser(new User());
	}

	private Component createUserInfo(User user) {
		ListItem item = new ListItem(
				user.getFirstName() + " " + user.getLastName(),
				user.getEmail());
		item.setPadding(Vertical.XS);
		item.setSpacing(Right.M);
		return item;
	}
	private Component createUsernames(User user) {
		return UIUtils.createLabel(TextColor.PRIMARY, user.getUsername());
	}
	private Component createRole(User user) {
		Icon icon;
		if (user.getRole().equals("Role.ADMIN")) {
			icon = UIUtils.createPrimaryIcon(VaadinIcon.DOCTOR);
		} else {
			icon = UIUtils.createSecondaryIcon(VaadinIcon.USER);
		}
		return icon;
	}
	private Component createLocked(User user) {
		Icon icon;
		if (!user.isAccountLocked()) {
			icon = UIUtils.createPrimaryIcon(VaadinIcon.CHECK);
		} else {
			icon = UIUtils.createErrorIcon(VaadinIcon.LOCK);
		}
		return icon;
	}

	private Component createPasswords(User user) {
		return UIUtils.createLabel(TextColor.SECONDARY , user.getPasswordHash());
	}

	private Component createDate(User user) {
		return new Span(UIUtils.formatDate(user.getRegistrationDate()));
	}

	private DetailsDrawer createDetailsDrawer() {
		detailsDrawer = new DetailsDrawer(DetailsDrawer.Position.RIGHT);
		// Header
		detailsDrawerHeader = new DetailsDrawerHeader("");
		detailsDrawerHeader.addCloseListener(buttonClickEvent -> {
			setUser(null);
			detailsDrawer.hide();
		});
		detailsDrawer.setHeader(detailsDrawerHeader);
		// Footer
		footer = new DetailsDrawerFooter();
		footer.addSaveListener(e -> {
			if (binder.isValid()) {
				userService.save(binder.getBean());
				updateList();
				UIUtils.showNotification("Changes saved. User added.");
			}
			detailsDrawer.hide();
		});
		footer.addResetListener(e -> setUser(new User()));
		footer.addDeleteListener(e -> {
			userService.delete(binder.getBean());
			updateList();
			setUser(null);
			detailsDrawer.hide();
			UIUtils.showNotification("Changes saved. User deleted.");
		});
		detailsDrawer.setFooter(footer);

		return detailsDrawer;
	}

	private void showDetails(User user) {
		detailsDrawerHeader.setTitle(user.getFirstName() + " " + user.getLastName());
		detailsDrawer.setContent(createDetails(user));
		detailsDrawer.show();
	}

	private FormLayout createDetails(User user) {
		TextField firstName = new TextField();
		firstName.setValue(user.getFirstName());
		firstName.setWidthFull();
		firstName.setValueChangeMode(ValueChangeMode.EAGER);

		TextField lastName = new TextField();
		lastName.setValue(user.getLastName());
		lastName.setWidthFull();
		lastName.setValueChangeMode(ValueChangeMode.EAGER);

		firstName.addValueChangeListener(e ->
				detailsDrawerHeader.setTitle(e.getValue() + " " + lastName.getValue()));
		lastName.addValueChangeListener(e ->
				detailsDrawerHeader.setTitle(firstName.getValue() + " " + e.getValue()));

		TextField username = new TextField();
		username.setValue(user.getUsername());
		username.setWidthFull();
		username.setValueChangeMode(ValueChangeMode.EAGER);

		RadioButtonGroup<String> status = new RadioButtonGroup<>();
		status.addThemeVariants(RadioGroupVariant.LUMO_VERTICAL);
		status.setItems("Active", "Inactive");
		status.setValue(!user.isAccountLocked() ? "Active" : "Inactive");

		PasswordField password = new PasswordField();
		password.setValue(user.getPasswordHash());
		password.setWidthFull();
		password.setValueChangeMode(ValueChangeMode.EAGER);

		TextField email = new TextField();
		email.setValue(user.getEmail());
		email.setWidthFull();
		email.setValueChangeMode(ValueChangeMode.EAGER);

		RadioButtonGroup<String> role = new RadioButtonGroup<>();
		role.addThemeVariants(RadioGroupVariant.LUMO_VERTICAL);
		role.setItems("Role.ADMIN", "Role.USER");
		role.setValue(user.getRole());
		// Form layout
		form = new FormLayout();
		form.addClassNames(LumoStyles.Padding.Bottom.L,
				LumoStyles.Padding.Horizontal.L, LumoStyles.Padding.Top.S);
		form.setResponsiveSteps(
				new FormLayout.ResponsiveStep("0", 1,
						FormLayout.ResponsiveStep.LabelsPosition.TOP),
				new FormLayout.ResponsiveStep("21em", 2,
						FormLayout.ResponsiveStep.LabelsPosition.TOP));
		form.addFormItem(firstName, "First Name");
		form.addFormItem(lastName, "Last Name");
		FormLayout.FormItem emailItem = form.addFormItem(email, "Email");
		FormLayout.FormItem usernameItem = form.addFormItem(username, "Username");
		FormLayout.FormItem passwordItem = form.addFormItem(password, "Password");
		FormLayout.FormItem roleItem = form.addFormItem(role,"Role");
		FormLayout.FormItem statusItem = form.addFormItem(status, "Status");
		UIUtils.setColSpan(2, usernameItem, emailItem, passwordItem);
		// Bind form fields
		binder.forField(firstName)
				.withValidator(new StringLengthValidator(
						"Please add a First Name of 3 or more characters", 3, null))
				.bind(User::getFirstName, User::setFirstName);
		binder.forField(lastName)
				.withValidator(new StringLengthValidator(
						"Please add a Last Name of 3 or more characters", 3, null))
				.bind(User::getLastName, User::setLastName);
		binder.forField(email)
				.withValidator(new EmailValidator("Not valid email address"))
				.bind(User::getEmail, User::setEmail);
		binder.forField(username)
				.withValidator(new StringLengthValidator(
						"Please add a username of 5 or more characters", 5, 30))
				.bind(User::getUsername, User::setUsername);
		binder.forField(password)
				.withValidator(pass -> pass.matches("^(|(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,})$"),
						"Password should consist of 8 or more chars, mixing digits, lowercase and uppercase letters\n" +
								"(Please provide plain password, not the hash)")
				.bind(User::getPasswordHash, User::setPasswordHash);
		binder.addValueChangeListener(event -> {
			footer.saveSetEnabled(binder.isValid());
			footer.deleteSetEnabled(binder.isValid());
		});

		return form;
	}

	private void updateList() {
		grid.setItems(userService.findAll(filter.getValue()));
	}
	public void setUser(User user) {
		binder.setBean(user);
	}
}
