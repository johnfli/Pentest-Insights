package com.pi.server.ui.util;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.entities.scanResults.zap.ZapResults;
import com.pi.server.ui.components.DataSeriesItemWithRadius;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.layout.size.Uniform;
import com.pi.server.ui.util.css.BorderRadius;
import com.pi.server.ui.util.css.BoxSizing;
import com.pi.server.ui.util.css.Shadow;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.charts.Chart;
import com.vaadin.flow.component.charts.model.*;

import java.util.List;

import static com.pi.server.ui.util.UIUtils.showNotification;

public class ChartUtils {


    public static Component createProgressChart(Scan.Status status, float value) {

        Chart chart = new Chart();
        chart.addClassName(status.getName().toLowerCase());
        chart.setSizeFull();

        Configuration configuration = chart.getConfiguration();
        configuration.getChart().setType(ChartType.SOLIDGAUGE);
        configuration.setTitle("");
        configuration.getTooltip().setEnabled(false);

        configuration.getyAxis().setMin(0);
        configuration.getyAxis().setMax(100);
        configuration.getyAxis().getLabels().setEnabled(false);

        PlotOptionsSolidgauge opt = new PlotOptionsSolidgauge();
        opt.getDataLabels().setEnabled(false);
        configuration.setPlotOptions(opt);

        DataSeriesItemWithRadius point = new DataSeriesItemWithRadius();
        point.setY(value);
        point.setInnerRadius("100%");
        point.setRadius("110%");
        configuration.setSeries(new DataSeries(point));

        Pane pane = configuration.getPane();
        pane.setStartAngle(0);
        pane.setEndAngle(360);

        Background background = new Background();
        background.setShape(BackgroundShape.ARC);
        background.setInnerRadius("100%");
        background.setOuterRadius("110%");
        pane.setBackground(background);

        return chart;
    }

    public static Component createDonutChart(String chartTitle, Series series, boolean bg) {

        Chart chart = new Chart(ChartType.PIE);

        Configuration conf = chart.getConfiguration();

        conf.setTitle(chartTitle);

        Tooltip tooltip = new Tooltip();
        tooltip.setValueDecimals(1);
        conf.setTooltip(tooltip);

        PlotOptionsPie plotOptions = new PlotOptionsPie();
        plotOptions.setDepth(45);
        plotOptions.setInnerSize("60%");
        plotOptions.setAllowPointSelect(true);
        plotOptions.setCursor(Cursor.POINTER);
        plotOptions.setShowInLegend(true);
        conf.setPlotOptions(plotOptions);

        conf.setSeries(series);
        chart.setVisibilityTogglingDisabled(true);

        chart.addClassName("donut-chart");

        FlexBoxLayout card = new FlexBoxLayout(chart);
        if (bg) {
            card.setBackgroundColor(LumoStyles.Color.BASE_COLOR);
            card.setShadow(Shadow.XS);
        }
        card.setBorderRadius(BorderRadius.S);
        card.setBoxSizing(BoxSizing.BORDER_BOX);
        card.setWidthFull();
        card.setPadding(Uniform.M);
        return card;
    }

    public static Component createAreaChart(List<ZapResults> zapResults) {

        Chart chart = new Chart(ChartType.AREA);
        Configuration conf = chart.getConfiguration();
        conf.setTitle(new Title("Vulnerabilities per Severity"));
        conf.setSubTitle("Powered by <a href=\"https://www.zaproxy.org/\">OWASP ZAP</a>");

        XAxis xAxis = conf.getxAxis();
        for (ZapResults zapResult:zapResults)
            xAxis.addCategory(zapResult.getGenerated());

        xAxis.setTickmarkPlacement(TickmarkPlacement.ON);

        YAxis yAxis = conf.getyAxis();
        yAxis.setTitle(new AxisTitle("Number of Vulnerabilities found"));
        yAxis.setMin(0);
        yAxis.getLabels().setStep(0.5);

        Tooltip tooltip = new Tooltip();
        // Customize tooltip formatting
        tooltip.setShared(true);
        tooltip.setValueSuffix(" vulnerabilities");
        conf.setTooltip(tooltip);

        PlotOptionsArea plotOptions = new PlotOptionsArea();
        plotOptions.setStacking(Stacking.NORMAL);
        conf.setPlotOptions(plotOptions);

        ListSeries highSeries = new ListSeries("High");
        ListSeries mediumSeries = new ListSeries("Medium");
        ListSeries lowSeries = new ListSeries("Low");
        ListSeries infoSeries = new ListSeries("Info");
        for (ZapResults zapResult:zapResults) {
            int[] zapAlertsCount = zapResult.getZapAlertsCount();
            int high = zapAlertsCount[1];
            int medium = zapAlertsCount[2];
            int low = zapAlertsCount[3];
            int	info = zapAlertsCount[4];

            highSeries.addData(high);
            mediumSeries.addData(medium);
            lowSeries.addData(low);
            infoSeries.addData(info);
        }

        conf.addSeries(highSeries);
        conf.addSeries(mediumSeries);
        conf.addSeries(lowSeries);
        conf.addSeries(infoSeries);
        chart.addClassName("vulnerabilities-chart");

        FlexBoxLayout card = new FlexBoxLayout(chart);
        card.setBackgroundColor(LumoStyles.Color.BASE_COLOR);
        card.setBorderRadius(BorderRadius.S);
        card.setBoxSizing(BoxSizing.BORDER_BOX);
        card.setHeight("400px");
        card.setPadding(Uniform.M);
        card.setShadow(Shadow.XS);
        return card;
    }

    public static Component createColumnChart(List<ZapResults> zapResults) {
        Chart chart = new Chart(ChartType.COLUMN);

        Configuration conf = chart.getConfiguration();
        conf.setTitle(new Title("Vulnerabilities per Severity"));
        conf.setSubTitle("Powered by <a href=\"https://www.zaproxy.org/\">OWASP ZAP</a>");
        conf.getLegend().setEnabled(true);

        XAxis xAxis = new XAxis();
        xAxis.setCrosshair(new Crosshair());
        for (ZapResults zapResult:zapResults)
            xAxis.addCategory(zapResult.getGenerated());
        conf.addxAxis(xAxis);

        YAxis yAxis = conf.getyAxis();
        yAxis.setTitle(new AxisTitle("Number of Vulnerabilities found"));
        yAxis.setMin(0);
        yAxis.getLabels().setStep(2);

        ListSeries highSeries = new ListSeries("High");
        ListSeries mediumSeries = new ListSeries("Medium");
        ListSeries lowSeries = new ListSeries("Low");
        ListSeries infoSeries = new ListSeries("Info");
        for (ZapResults zapResult:zapResults) {
            int[] zapAlertsCount = zapResult.getZapAlertsCount();
            int high = zapAlertsCount[1];
            int medium = zapAlertsCount[2];
            int low = zapAlertsCount[3];
            int	info = zapAlertsCount[4];

            highSeries.addData(high);
            mediumSeries.addData(medium);
            lowSeries.addData(low);
            infoSeries.addData(info);
        }

        conf.addSeries(highSeries);
        conf.addSeries(mediumSeries);
        conf.addSeries(lowSeries);
        conf.addSeries(infoSeries);

        Tooltip tooltip = new Tooltip();
        tooltip.setShared(true);
        tooltip.setValueSuffix(" vulnerabilities");
        conf.setTooltip(tooltip);

        chart.addClassName("vulnerabilities-chart");

        FlexBoxLayout card = new FlexBoxLayout(chart);
        card.setBorderRadius(BorderRadius.S);
        card.setBoxSizing(BoxSizing.BORDER_BOX);
        card.setHeight("400px");
        card.setPadding(Uniform.M);
        return card;
    }
}
