package com.pi.server.ui.components;

import com.pi.server.backend.entities.scanResults.testNg.TestNgResults;
import com.pi.server.ui.layout.size.Right;
import com.pi.server.ui.layout.size.Vertical;
import com.pi.server.ui.util.*;
import com.pi.server.ui.util.css.FlexDirection;
import com.pi.server.ui.util.css.Overflow;
import com.pi.server.ui.util.css.PointerEvents;
import com.pi.server.ui.util.css.TextOverflow;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.FooterRow;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.HeaderRow;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.page.Page;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.provider.ListDataProvider;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.value.ValueChangeMode;
import com.vaadin.flow.shared.Registration;
import org.apache.commons.lang3.StringUtils;

import java.util.List;

public class FunctionalGrid extends Grid<TestNgResults.Suite.Test.Class.TestMethod> {

    private HeaderRow filterRow = null;
    private ComboBox<Status> statusFilter;
    private FooterRow footerRow = null;
    private Label footerLabel;

    private enum Status {
        Failed      ("FAIL"),
        Passed      ("PASS"),
        Ignored     ("IGNORE"),
        Skipped     ("SKIP");

        private final String name;

        Status (String name) { this.name = name; }

        public String getName() { return name; }
    }

    public static final int MOBILE_BREAKPOINT = 480;
    private Registration resizeListener;

    List<TestNgResults.Suite.Test.Class.TestMethod> testNgMethods;

    public FunctionalGrid (List<TestNgResults.Suite.Test.Class.TestMethod> testNgMethods) {
        this.testNgMethods = testNgMethods;
        createGrid();
    }

    public void createGrid() {
        setSelectionMode(SelectionMode.NONE);
        addThemeName("mobile");
        ListDataProvider<TestNgResults.Suite.Test.Class.TestMethod> dataProvider
                = new ListDataProvider<>(testNgMethods);
        setDataProvider(dataProvider);

        // "Mobile" column
        Grid.Column<TestNgResults.Suite.Test.Class.TestMethod> mobileColumn =
                addColumn(new ComponentRenderer<>(this::getMobileTemplate))
                        .setSortable(true)
                        .setComparator(TestNgResults.Suite.Test.Class.TestMethod::getName)
                        .setHeader("Method");
        mobileColumn.setVisible(false);

        // "Desktop" columns
        Grid.Column<TestNgResults.Suite.Test.Class.TestMethod> nameColumn =
                addColumn(new ComponentRenderer<>(this::createMethodName))
                        .setComparator(TestNgResults.Suite.Test.Class.TestMethod::getName)
                        .setAutoWidth(true)
                        .setFlexGrow(1)
                        .setHeader("Method Name")
                        .setSortable(true);

        Grid.Column<TestNgResults.Suite.Test.Class.TestMethod> durationColumn =
                addColumn(new ComponentRenderer<>(this::createDurationMs))
                        .setSortable(true)
                        .setComparator(TestNgResults.Suite.Test.Class.TestMethod::getDurationMs)
                        .setAutoWidth(true)
                        .setFlexGrow(0)
                        .setHeader("Duration (ms)")
                        .setTextAlign(ColumnTextAlign.CENTER);

        Grid.Column<TestNgResults.Suite.Test.Class.TestMethod> statusColumn =
                addColumn(new ComponentRenderer<>(this::createStatus))
                        .setSortable(true)
                        .setComparator(TestNgResults.Suite.Test.Class.TestMethod::getStatus)
                        .setAutoWidth(true)
                        .setFlexGrow(0)
                        .setHeader("Status")
                        .setTextAlign(ColumnTextAlign.CENTER);
        // Add Grid Item Details
        setItemDetailsRenderer(new ComponentRenderer<>(this::createItemDetails));
        // Add Grid Filtering functionality for each Column
        filterRow = appendHeaderRow();
        // First filter
        TextField nameFilter = new TextField();
        nameFilter.addValueChangeListener(event -> dataProvider.addFilter(
                testMethod -> StringUtils.containsIgnoreCase(testMethod.getName(),
                        nameFilter.getValue())));
        nameFilter.setValueChangeMode(ValueChangeMode.EAGER);

        filterRow.getCell(nameColumn).setComponent(nameFilter);
        nameFilter.setPlaceholder("Filter by Method Name");
        // Second filter
        TextField durationFilter = new TextField();
        durationFilter.addValueChangeListener(event -> {
            if (event.getValue() != null)
                dataProvider.addFilter(testMethod -> StringUtils.containsIgnoreCase(
                        String.valueOf(testMethod.getDurationMs()), durationFilter.getValue()));
            else
                dataProvider.clearFilters();
        });
        durationFilter.setValueChangeMode(ValueChangeMode.EAGER);

        filterRow.getCell(durationColumn).setComponent(durationFilter);
        durationFilter.setSizeFull();
        durationFilter.setClearButtonVisible(true);
        durationFilter.setPlaceholder("Filter by Duration");
        // Third filter
        statusFilter = new ComboBox<>();
        statusFilter.setItems(Status.values());
        statusFilter.addValueChangeListener(event -> {
            if (event.getValue() != null)
                dataProvider.addFilter(testMethod -> StringUtils.equalsIgnoreCase(
                            testMethod.getStatus(), statusFilter.getValue().getName()));
            else
                dataProvider.clearFilters();
        });

        filterRow.getCell(statusColumn).setComponent(statusFilter);
        statusFilter.setSizeFull();
        statusFilter.setClearButtonVisible(true);
        statusFilter.setPlaceholder("Filter by Status");

        setClassNameGenerator(testMethod -> {
            switch (testMethod.getStatus()) {
                case "FAIL":
                    return "fail";
                case "PASS":
                    return "pass";
                case "IGNORE":
                    return "ignore";
                case "SKIP":
                    return "skip";
                default:
                    return "";
            }});
        setHeightByRows(true);
        setWidthFull();
    }

    public void createFooter(TestNgResults testNgResults) {
        footerLabel = new Label(
                    "Total: " + testNgResults.getTotal() +
                        ", Passed: " + testNgResults.getPassed() +
                        ", Failed: " + testNgResults.getFailed() +
                        ", Skipped: " + testNgResults.getSkipped() +
                        ", Ignored: " + testNgResults.getIgnored()
        );
        // Set Grid Footer
        footerRow = appendFooterRow();
        footerRow.getCell(getColumns().get(1)).setComponent(footerLabel);
    }

    private FunctionalGridMobileTemplate getMobileTemplate(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
        return new FunctionalGridMobileTemplate(testNgMethod);
    }

    private Component createMethodName(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
        ListItem item = new ListItem(testNgMethod.getName());
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createDurationMs(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
        int duration = testNgMethod.getDurationMs();
        ListItem item = new ListItem(Integer.toString(duration));
        item.setPadding(Vertical.XS);
        item.setSpacing(Right.M);
        return item;
    }

    private Component createStatus(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
        Icon icon;
        switch (testNgMethod.getStatus()) {
            case "PASS":
                icon = UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O);
                break;
            case "IGNORE":
                icon = UIUtils.createPrimaryIcon(VaadinIcon.FORWARD);
                icon.setColor("#e4d354");
                break;
            case "SKIP":
                icon = UIUtils.createPrimaryIcon(VaadinIcon.FORWARD);
                break;
            default:
                icon = UIUtils.createErrorIcon(VaadinIcon.EXCLAMATION_CIRCLE);
                break;
        }

        return icon;
    }

    private Component createItemDetails(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
        TestNgResults.Suite.Test.Class.TestMethod.Exception exception = testNgMethod.getException();
        String message = exception == null ? "No error message" : exception.getMessage();
        String stacktrace = exception == null ? "No Stacktrace" : exception.getFullStacktrace();
        return new VerticalLayout(
                UIUtils.createH6Label("Error Message:"),
                UIUtils.createLabel(TextColor.ERROR, message),
                UIUtils.createH6Label("Full Stacktrace:"),
                UIUtils.createLabel(TextColor.ERROR, stacktrace)
        );
    }

    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        getUI().ifPresent(ui -> {
            Page page = ui.getPage();
            resizeListener = page.addBrowserWindowResizeListener(event -> updateVisibleColumns(event.getWidth()));
            page.retrieveExtendedClientDetails(details -> updateVisibleColumns(details.getBodyClientWidth()));
        });
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        resizeListener.remove();
        super.onDetach(detachEvent);
    }

    private void updateVisibleColumns(int width) {
        boolean mobile = width < MOBILE_BREAKPOINT;
        List<Column<TestNgResults.Suite.Test.Class.TestMethod>> columns = getColumns();

        // "Mobile" column
        columns.get(0).setVisible(mobile);
        if (mobile) {
            filterRow.getCell(columns.get(0)).setComponent(statusFilter);
            filterRow.getCell(columns.get(3)).setComponent(null);
        } else {
            filterRow.getCell(columns.get(0)).setComponent(null);
            filterRow.getCell(columns.get(3)).setComponent(statusFilter);
        }

        // "Desktop" columns
        for (int i = 1; i < columns.size(); i++) {
            columns.get(i).setVisible(!mobile);
        }

        if (footerRow != null)
            if (mobile) {
                footerRow.getCell(columns.get(0)).setComponent(footerLabel);
                footerRow.getCell(columns.get(1)).setComponent(null);
            } else {
                footerRow.getCell(columns.get(1)).setComponent(footerLabel);
                footerRow.getCell(columns.get(0)).setComponent(null);
            }
    }
    /**
     * A layout for displaying BankAccount info in a mobile friendly format.
     */
    private static class FunctionalGridMobileTemplate extends FlexBoxLayout {

        private final TestNgResults.Suite.Test.Class.TestMethod testNgMethod;

        public FunctionalGridMobileTemplate(TestNgResults.Suite.Test.Class.TestMethod testNgMethod) {
            this.testNgMethod = testNgMethod;

            UIUtils.setLineHeight(LineHeight.M, this);
            UIUtils.setPointerEvents(PointerEvents.NONE, this);

            setPadding(Vertical.S);
            setSpacing(Right.L);

            Component status = getStatus();
            Label methodName = getMethodName();
            FlexBoxLayout duration = getDuration();

            FlexBoxLayout column = new FlexBoxLayout(methodName, duration);
            column.setFlexDirection(FlexDirection.COLUMN);
            column.setOverflow(Overflow.HIDDEN);

            add(status, column);
            setFlexGrow(1, column);
        }

        private Component getStatus() {
            Icon icon;
            switch (testNgMethod.getStatus()) {
                case "PASS":
                    icon = UIUtils.createSuccessIcon(VaadinIcon.CHECK_SQUARE_O);
                    break;
                case "IGNORE":
                    icon = UIUtils.createPrimaryIcon(VaadinIcon.FORWARD);
                    icon.setColor("#e4d354");
                    break;
                case "SKIP":
                    icon = UIUtils.createPrimaryIcon(VaadinIcon.FORWARD);
                    break;
                default:
                    icon = UIUtils.createErrorIcon(VaadinIcon.EXCLAMATION_CIRCLE);
                    break;
            }
            icon.setSize(LumoStyles.IconSize.M);
            setFlexShrink("0", icon);
            return icon;
        }

        private Label getMethodName() {
            Label methodName;
            switch (testNgMethod.getStatus()) {
                case "PASS":
                    methodName = UIUtils.createLabel(FontSize.S, TextColor.SUCCESS, testNgMethod.getName());
                    break;
                case "IGNORE":
                    methodName = UIUtils.createLabel(FontSize.S, TextColor.BODY, testNgMethod.getName());
                    methodName.getStyle().set("color", "#e4d354");
                    break;
                case "SKIP":
                    methodName = UIUtils.createLabel(FontSize.S, TextColor.PRIMARY, testNgMethod.getName());
                    break;
                case "FAIL":
                    methodName = UIUtils.createLabel(FontSize.S, TextColor.ERROR, testNgMethod.getName());
                    break;
                default:
                    methodName = UIUtils.createLabel(FontSize.S, TextColor.BODY, testNgMethod.getName());
                    break;
            }
            UIUtils.setOverflow(Overflow.HIDDEN, methodName);
            UIUtils.setTextOverflow(TextOverflow.ELLIPSIS, methodName);
            return methodName;
        }

        private FlexBoxLayout getDuration() {
            int duration = testNgMethod.getDurationMs();
            Label durationLabel = UIUtils.createLabel(FontSize.S, TextColor.SECONDARY,
                    Integer.toString(duration));

            FlexBoxLayout wrapper = new FlexBoxLayout(durationLabel);
            wrapper.setAlignItems(Alignment.BASELINE);
            wrapper.setFlexGrow(1, durationLabel);
            return wrapper;
        }
    }
}
