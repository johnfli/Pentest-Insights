package com.pi.server.ui;

import com.pi.server.security.SecurityUtils;
import com.pi.server.ui.components.FlexBoxLayout;
import com.pi.server.ui.components.navigation.bar.AppBar;
import com.pi.server.ui.components.navigation.bar.TabBar;
import com.pi.server.ui.components.navigation.drawer.NaviDrawer;
import com.pi.server.ui.components.navigation.drawer.NaviItem;
import com.pi.server.ui.components.navigation.drawer.NaviMenu;
import com.pi.server.ui.exceptions.AccessDeniedException;
import com.pi.server.ui.util.AppConst;
import com.pi.server.ui.util.UIUtils;
import com.pi.server.ui.util.css.FlexDirection;
import com.pi.server.ui.util.css.Overflow;
import com.pi.server.ui.views.*;
import com.pi.server.ui.views.adminSection.Accounts;
import com.pi.server.ui.views.adminSection.Scans;
import com.vaadin.flow.component.*;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.dependency.JsModule;
import com.vaadin.flow.component.dependency.StyleSheet;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.page.Push;
import com.vaadin.flow.component.page.Viewport;
import com.vaadin.flow.router.*;
import com.vaadin.flow.server.*;
import com.vaadin.flow.theme.lumo.Lumo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


@CssImport(value = "./styles/components/charts.css", themeFor = "vaadin-chart", include = "vaadin-chart-default-theme")
@CssImport(value = "./styles/components/floating-action-button.css", themeFor = "vaadin-button")
@CssImport(value = "./styles/components/grid.css", themeFor = "vaadin-grid")
@CssImport("./styles/lumo/border-radius.css")
@CssImport("./styles/lumo/icon-size.css")
@CssImport("./styles/lumo/margin.css")
@CssImport("./styles/lumo/padding.css")
@CssImport("./styles/lumo/shadow.css")
@CssImport("./styles/lumo/spacing.css")
@CssImport("./styles/lumo/typography.css")
@CssImport("./styles/misc/box-shadow-borders.css")
@CssImport(
		value = "./styles/styles.css",
		include = "lumo-badge")
@JsModule("@vaadin/vaadin-lumo-styles/badge")
@PWA(
		name = AppConst.APP_NAME,
		shortName = "Pentest Ins.",
		description = "Security Testing for your Web Application made easy.",
		iconPath = "images/logos/logo.png",
		offlineResources = {
				"./styles/offline.css",
				"./images/offline-bg-2.jpg"
		},
		enableInstallPrompt = true,
		backgroundColor = "#233348",
		themeColor = "#233348" )
@Viewport(AppConst.VIEWPORT)
@StyleSheet("http://fonts.googleapis.com/css?family=Roboto")
@Push
public class MainLayout extends FlexBoxLayout
		implements RouterLayout, PageConfigurator, AfterNavigationObserver, BeforeLeaveObserver, BeforeEnterObserver {

	private static final Logger log = LoggerFactory.getLogger(MainLayout.class);
	private static final String CLASS_NAME = "root";

	private Div appHeaderOuter;

	private FlexBoxLayout row;
	private NaviDrawer naviDrawer;
	private FlexBoxLayout column;

	private Div appHeaderInner;
	private FlexBoxLayout viewContainer;
	private Div appFooterInner;

	private Div appFooterOuter;

	private TabBar tabBar;
	private boolean navigationTabs = false;
	private AppBar appBar;

	public MainLayout() {
		VaadinSession.getCurrent()
				.setErrorHandler((ErrorHandler) errorEvent -> {
					log.error("Uncaught UI exception",
							errorEvent.getThrowable());
					Notification.show(
							"We are sorry, but an internal error occurred");
				});

		addClassName(CLASS_NAME);
		setFlexDirection(FlexDirection.COLUMN);
		setSizeFull();
		// Initialise the UI building blocks
		initStructure();
		// Populate the navigation drawer
		initNaviItems();
		// Configure the headers and footers (optional)
		initHeadersAndFooters();
	}

	/**
	 * Initialise the required components and containers.
	 */
	private void initStructure() {
		naviDrawer = new NaviDrawer();

		viewContainer = new FlexBoxLayout();
		viewContainer.addClassName(CLASS_NAME + "__view-container");
		viewContainer.setOverflow(Overflow.HIDDEN);

		column = new FlexBoxLayout(viewContainer);
		column.addClassName(CLASS_NAME + "__column");
		column.setFlexDirection(FlexDirection.COLUMN);
		column.setFlexGrow(1, viewContainer);
		column.setOverflow(Overflow.HIDDEN);

		row = new FlexBoxLayout(naviDrawer, column);
		row.addClassName(CLASS_NAME + "__row");
		row.setFlexGrow(1, column);
		row.setOverflow(Overflow.HIDDEN);
		add(row);
		setFlexGrow(1, row);
	}

	/**
	 * Initialise the navigation items.
	 */
	private void initNaviItems() {
		NaviMenu menu = naviDrawer.getMenu();
		menu.addNaviItem(VaadinIcon.BOLT, AppConst.TITLE_HOME, Home.class);
		menu.addNaviItem(VaadinIcon.DASHBOARD, AppConst.TITLE_DASHBOARD, Dashboard.class);
		menu.addNaviItem(VaadinIcon.RECORDS, AppConst.TITLE_REPORTS, Reports.class);
		menu.addNaviItem(VaadinIcon.INFO_CIRCLE, AppConst.TITLE_ABOUT, About.class);
		if (SecurityUtils.isAccessGranted(Accounts.class)) {

			NaviItem adminSection = menu.addNaviItem(VaadinIcon.LOCK, "Admin Section",
					null);
			menu.addNaviItem(adminSection, AppConst.TITLE_ACCOUNTS, Accounts.class);
			menu.addNaviItem(adminSection, AppConst.TITLE_SCANS, Scans.class);
		}
		menu.addNaviItem(VaadinIcon.COG, AppConst.TITLE_SETTINGS, Settings.class);
		menu.addNaviItem(VaadinIcon.SIGN_OUT, AppConst.TITLE_LOGOUT, Logout.class);
	}

	/**
	 * Configure the app's inner and outer headers and footers.
	 */
	private void initHeadersAndFooters() {
		// setAppHeaderOuter();
		// setAppFooterInner();
		// setAppFooterOuter();

		// Default inner header setup:
		// - When using tabbed navigation the view title, user avatar and main menu button will appear in the TabBar.
		// - When tabbed navigation is turned off they appear in the AppBar.

		appBar = new AppBar("");

		// Tabbed navigation
		if (navigationTabs) {
			tabBar = new TabBar();
			UIUtils.setTheme(Lumo.DARK, tabBar);

			// Shift-click to add a new tab
			for (NaviItem item : naviDrawer.getMenu().getNaviItems()) {
				item.addClickListener(e -> {
					if (e.getButton() == 0 && e.isShiftKey()) {
						tabBar.setSelectedTab(tabBar.addClosableTab(item.getText(), item.getNavigationTarget()));
					}
				});
			}
			appBar.getAvatar().setVisible(false);
			setAppHeaderInner(tabBar, appBar);

			// Default navigation
		} else {
			UIUtils.setTheme(Lumo.DARK, appBar);
			setAppHeaderInner(appBar);
		}
	}

	private void setAppHeaderOuter(Component... components) {
		if (appHeaderOuter == null) {
			appHeaderOuter = new Div();
			appHeaderOuter.addClassName("app-header-outer");
			getElement().insertChild(0, appHeaderOuter.getElement());
		}
		appHeaderOuter.removeAll();
		appHeaderOuter.add(components);
	}

	private void setAppHeaderInner(Component... components) {
		if (appHeaderInner == null) {
			appHeaderInner = new Div();
			appHeaderInner.addClassName("app-header-inner");
			column.getElement().insertChild(0, appHeaderInner.getElement());
		}
		appHeaderInner.removeAll();
		appHeaderInner.add(components);
	}

	private void setAppFooterInner(Component... components) {
		if (appFooterInner == null) {
			appFooterInner = new Div();
			appFooterInner.addClassName("app-footer-inner");
			column.getElement().insertChild(column.getElement().getChildCount(),
					appFooterInner.getElement());
		}
		appFooterInner.removeAll();
		appFooterInner.add(components);
	}

	private void setAppFooterOuter(Component... components) {
		if (appFooterOuter == null) {
			appFooterOuter = new Div();
			appFooterOuter.addClassName("app-footer-outer");
			getElement().insertChild(getElement().getChildCount(),
					appFooterOuter.getElement());
		}
		appFooterOuter.removeAll();
		appFooterOuter.add(components);
	}

	@Override
	public void configurePage(InitialPageSettings settings) {
		settings.addMetaTag("apple-mobile-web-app-capable", "yes");
		settings.addMetaTag("apple-mobile-web-app-status-bar-style", "black");

		settings.addFavIcon("icon", "frontend/images/favicons/favicon.ico",
				"256x256");
	}

	@Override
	public void showRouterLayoutContent(HasElement content) {
		this.viewContainer.getElement().appendChild(content.getElement());
	}

	public NaviDrawer getNaviDrawer() {
		return naviDrawer;
	}

	public static MainLayout get() {
		return (MainLayout) UI.getCurrent().getChildren()
				.filter(component -> component.getClass() == MainLayout.class)
				.findFirst().get();
	}

	public AppBar getAppBar() {
		return appBar;
	}

	@Override
	public void afterNavigation(AfterNavigationEvent event) {
		if (navigationTabs) {
			afterNavigationWithTabs(event);
		} else {
			afterNavigationWithoutTabs(event);
		}
	}

	private void afterNavigationWithTabs(AfterNavigationEvent e) {
		NaviItem active = getActiveItem(e);
		if (active == null) {
			if (tabBar.getTabCount() == 0) {
				tabBar.addClosableTab("", Home.class);
			}
		} else {
			if (tabBar.getTabCount() > 0) {
				tabBar.updateSelectedTab(active.getText(),
						active.getNavigationTarget());
			} else {
				tabBar.addClosableTab(active.getText(),
						active.getNavigationTarget());
			}
		}
		appBar.getMenuIcon().setVisible(false);
	}

	private NaviItem getActiveItem(AfterNavigationEvent e) {
		for (NaviItem item : naviDrawer.getMenu().getNaviItems()) {
			if (item.isHighlighted(e)) {
				return item;
			}
		}
		return null;
	}

	private void afterNavigationWithoutTabs(AfterNavigationEvent e) {
		NaviItem active = getActiveItem(e);
		if (active != null) {
			getAppBar().setTitle(active.getText());
		}
	}

	@Override
	public void beforeEnter(BeforeEnterEvent event) {
		final boolean accessGranted =
				SecurityUtils.isAccessGranted(event.getNavigationTarget());
		if (!accessGranted) {
			event.rerouteToError(AccessDeniedException.class);
		}
		appBar.setTheme();
	}

	@Override
	public void beforeLeave(BeforeLeaveEvent event) {
		boolean isLoggingOut = event.getNavigationTarget().equals(Logout.class);
		if(isLoggingOut) {
			BeforeLeaveEvent.ContinueNavigationAction action = event.postpone();
			ConfirmDialog logoutDialog = new ConfirmDialog();
			logoutDialog.setHeader("Logout");
			String textHtml = "<p>Are you sure you want to <b>leave</b> this <b>session</b>?</p>";
			logoutDialog.setText(new Html(textHtml).getElement());

			Button confirmButton = new Button("Confirm", e -> {
				action.proceed();
				logoutDialog.close();
			});
			confirmButton.addThemeVariants(ButtonVariant.LUMO_SUCCESS, ButtonVariant.LUMO_PRIMARY);
			confirmButton.setIcon(VaadinIcon.CHECK.create());
			confirmButton.addClickShortcut(Key.ENTER);
			logoutDialog.setConfirmButton(confirmButton.getElement());
			Button cancelButton = new Button("Cancel", e -> logoutDialog.close());
			cancelButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_PRIMARY);
			cancelButton.setIcon(VaadinIcon.CLOSE.create());
			cancelButton.addClickShortcut(Key.ESCAPE);
			logoutDialog.setRejectButton(cancelButton.getElement());
			logoutDialog.open();
		}
	}
}


