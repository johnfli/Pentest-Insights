package com.pi.server.backend.entities.scanResults.zap;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "@version",
    "@generated",
    "site"
})
public class ZapResults {

    private String targetSite;
    @JsonProperty("@version")
    private String version;
    @JsonProperty("@generated")
    private String generated;
    @JsonProperty("site")
    private List<Site> sites = null;

    public String getTargetSite() { return targetSite; }

    public void setTargetSite(String targetSite) { this.targetSite = targetSite; }

    @JsonProperty("@version")
    public String getVersion() {
        return version;
    }

    @JsonProperty("@version")
    public void setVersion(String version) {
        this.version = version;
    }

    @JsonProperty("@generated")
    public String getGenerated() {
        return generated;
    }

    @JsonProperty("@generated")
    public void setGenerated(String generated) {
        this.generated = generated;
    }

    @JsonProperty("site")
    public List<Site> getSites() {
        return sites;
    }

    @JsonProperty("site")
    public void setSites(List<Site> site) {
        this.sites = site;
    }

    public Site getTargetSiteObj() {
        Site targetSiteObj = null;
        for (Site site : sites)
            if (targetSite.contains(site.getName()))
                targetSiteObj = site;
        return  targetSiteObj;
    }

    public List<Alert> getCommonAlerts(ZapResults otherZapResults) {
        Site targetThis     = this.getTargetSiteObj();
        Site targetOther    = otherZapResults.getTargetSiteObj();
        List<Alert> commonAlerts = new ArrayList<>();

        if (targetThis != null && targetOther != null) {
            List<Alert> alerts = targetThis.getAlerts();
            List<Alert> otherAlerts = targetOther.getAlerts();

            for (Alert alert : alerts)
                for (Alert otherAlert : otherAlerts)
                    if (alert.getName().equals(otherAlert.getName()))
                        commonAlerts.add(alert);
        } else {
            System.out.println("-: Error retrieving alerts for the target site in ZapResults.getCommonAlerts().");
        }
        return commonAlerts;
    }

    public int[] getZapAlertsCount() {
        Site target = getTargetSiteObj();
        if (target != null) {
            List<Alert> alerts = target.getAlerts();
            int total = alerts.size();
            int high = 0, medium = 0, low = 0, info = 0;
            for (Alert alert : alerts) {
                if (alert.getRiskcode().equalsIgnoreCase("3"))
                    high++;
                if (alert.getRiskcode().equalsIgnoreCase("2"))
                    medium++;
                if (alert.getRiskcode().equalsIgnoreCase("1"))
                    low++;
                if (alert.getRiskcode().equalsIgnoreCase("0"))
                    info++;
            }
            return new int[]{total, high, medium, low, info};
        } else {
            System.out.println(" -: Error retrieving alerts for the target site in ZapResults.getZapAlertsCount().");
            return new int[]{-1, -1, -1, -1, -1};
        }

    }

    @Override
    public String toString() {
        return "{" +
        " version: " + version +
        ", generated: " + generated +
        ", site: " + sites.toString() +
        " }";
    }
}
