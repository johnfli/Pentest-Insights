package com.pi.server.backend.services.util;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Properties;

public class PropertiesFile {

    private static final Properties prop = new Properties();

    public static int isScanningAnotherApp() {

        try {
            FileInputStream inputStream = new FileInputStream(
                    "security-project/src/test/resources"
                            + "/config.properties");
            prop.load(inputStream);
            inputStream.close();
            String property = prop.getProperty("scanning");
            System.out.println("scanning="+ property);
            // Check if ZAP is scanning already another
            if (property.equalsIgnoreCase("ON"))
                return 0;
            else
                return 1;

        } catch (Exception e) {
            System.out.println("Problem reading config.properties file: " + e);
            e.printStackTrace();
            return 2;
        }
    }

    public static void writePropertiesFile(String browserType, String browserMode,
                                           String zapOptions) {

        try {
            FileInputStream inputStream = new FileInputStream(
            "security-project/src/test/resources"
                    + "/config.properties");
            prop.load(inputStream);
            inputStream.close();
            // Set the property that indicates ZAP occupied (already scanning)
            prop.setProperty("scanning", "ON");
            // Set the Browser Type
            prop.setProperty("browser", browserType);
            // Set the Browser Mode
            prop.setProperty("headlessEnabled", browserMode);
            // Reset the ZAP Options
            prop.setProperty("spiderEnabled", "OFF");
            prop.setProperty("passiveScanEnabled", "OFF");
            prop.setProperty("activeScanEnabled", "OFF");
            prop.setProperty("ajaxSpiderEnabled", "OFF");
            // Set only the selected ZAP Options
            if(zapOptions.contains("Crawling"))
                prop.setProperty("spiderEnabled", "ON");
            if(zapOptions.contains("Passive Scanning"))
                prop.setProperty("passiveScanEnabled", "ON");
            if(zapOptions.contains("Active Scanning"))
                prop.setProperty("activeScanEnabled", "ON");
            if(zapOptions.contains("AJAX Spidering"))
                prop.setProperty("ajaxSpiderEnabled", "ON");

            OutputStream outputStream = new FileOutputStream(
            "security-project/src/test/resources"
                    + "/config.properties");
            prop.store(outputStream, null);
            outputStream.close();

        } catch (Exception e) {
            System.out.println("Problem writing config.properties file: " + e);
            e.printStackTrace();
        }

    }


    public static void setScanningDone() {

        try {
            FileInputStream inputStream = new FileInputStream(
            "security-project/src/test/resources"
                    + "/config.properties");
            prop.load(inputStream);
            inputStream.close();
            // Set the property that indicates ZAP occupied (already scanning)
            prop.setProperty("scanning", "OFF");

            OutputStream outputStream = new FileOutputStream(
            "security-project/src/test/resources"
                    + "/config.properties");
            prop.store(outputStream, null);
            outputStream.close();

        } catch (Exception e) {
            System.out.println("Problem writing config.properties file: " + e);
            e.printStackTrace();
        }

    }

}
