package com.pi.server.backend.services;

import com.pi.server.backend.entities.Scan;
import com.pi.server.backend.repositories.ScanRepository;
import com.pi.server.backend.services.util.JavaParser;
import com.pi.server.backend.services.util.PropertiesFile;
import org.apache.maven.cli.MavenCli;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.List;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class ScanService {
    private static final Logger LOGGER = Logger.getLogger(ScanService.class.getName());

    private final ScanRepository scanRepository;

    @Autowired
    public ScanService(ScanRepository scanRepository) {
        this.scanRepository = scanRepository;
    }

    public List<Scan> findAll(String filterText) {
        if(filterText == null || filterText.isEmpty()) {
            return scanRepository.findAll();
        }
        else {
            return scanRepository.search(filterText);
        }
    }

    public List<Scan> findAllByUserId(long userId, String filterText) {
        if(filterText == null || filterText.isEmpty()) {
            return scanRepository.findByUserId(userId);
        }
        else {
            return scanRepository.searchByUserId(userId, filterText);
        }
    }

    public Scan findById(long id) {
        return scanRepository.findById(id);
    }
    public Scan findByIdAndUserId(long id, long userId) {
        return scanRepository.findByIdAndUserId(id, userId);
    }

    public List<Scan> findPreviousScanByIdAndUserId(long id, long userId, String zapOptions) {
        return scanRepository.findPreviousScanByIdAndUserId(id, userId, zapOptions);
    }

    public long count() {
        return scanRepository.count();
    }

    public void delete(Scan scan) {
        scanRepository.delete(scan);
        if (deleteDirectory(new File(scan.getJavaFilePath())))
            System.out.println("Scan and corresponding folder deleted successfully.");
        else
            System.out.println("Scan deleted but problem deleting the corresponding folder.");
    }

    boolean deleteDirectory(File directoryToBeDeleted) {
        File[] allContents = directoryToBeDeleted.listFiles();
        if (allContents != null) {
            for (File file : allContents) {
                deleteDirectory(file);
            }
        }
        return directoryToBeDeleted.delete();
    }

    public void save(Scan scan) {
        if (scan == null) {
            LOGGER.log(Level.SEVERE,
                    "This scan is null. Are you sure you have connected your form to the application?");
            return;
        }
        scanRepository.save(scan);
    }

    public void testApp(Scan scan) {

        while (PropertiesFile.isScanningAnotherApp() == 0)
            sleep();

        PropertiesFile.writePropertiesFile(scan.getBrowserType().toString(),
                scan.getHeadlessMode().toString(), scan.getZapOptions());
        try {
            JavaParser javaParser = new JavaParser();
            String targetSite = javaParser.refactorJavaFile(scan.getJavaFilePath(), scan.getJavaFileName());
            if (targetSite != null) {
                scan.setTargetSite(targetSite);
                save(scan);
            } else {
                System.out.println(" ===: Problem locating target site inside .java file :===");
            }
        } catch (Exception e) {
            System.out.println(" === Problem in refactoring the Java File. ===");
            e.printStackTrace();
        }
        if (setUpScanFolder(scan) == 1) {
            System.err.println("Error copying .java file into the .../" + scan.getId() + "/ folder.");
            scan.setStatus(Scan.Status.ABORTED);
            save(scan);
            return;
        }
        save(scan);
        scan.setStatus(Scan.Status.RUNNING);
        save(scan);
        // Run the TestNG test suite
        System.out.println("========= Maven CLI to be executed =========");
        MavenCli cli = new MavenCli();
        System.setProperty("maven.multiModuleProjectDirectory", ".");
      int cliResult = cli.doMain(new String[]{"-U", "clean", "install"}, "security-project", System.out, System.out);
        System.out.println("========= Maven CLI returned ========= (cli result error code was : " + cliResult + ")");

        if (saveScanResults(scan) == 0)
            scan.setStatus(Scan.Status.FINISHED);
        else {
            System.err.println("Error copying results into the .../" + scan.getUserId() +
                                "/" + scan.getId() + "/reports folder.");
            scan.setStatus(Scan.Status.ABORTED);
        }
        save(scan);
        PropertiesFile.setScanningDone();
    }

    /***     Scan Specific Folder: scr/main/resources/javaFiles/<UserId>/<ScanId>    ***/
    private int setUpScanFolder(Scan scan) {
        try {
            // Move the uploaded test file into the equivalent scan folder (folder name: <ScanId>)
            String srcFilePath = scan.getJavaFilePath();
            scan.setJavaFilePath(srcFilePath + scan.getId().toString() + "/");
            String targetFilePath = scan.getJavaFilePath();
            File dir = new File(targetFilePath);
            if (!dir.exists()) dir.mkdirs();
            Files.move(
                    Paths.get(srcFilePath + scan.getJavaFileName()),
                    Paths.get(targetFilePath + scan.getJavaFileName())
            );
            return 0;
        } catch (IOException e) {
            System.out.println("IOException : ");
            e.printStackTrace();
            return 1;
        }
    }
    /***     Scan Results Folder: scr/main/resources/javaFiles/<UserId>/<ScanId>/reports    ***/
    private int saveScanResults(Scan scan) {
        try {
            // Retrieve the test results and place them into the <ScanId>/reports folder
            String targetFilePath = scan.getJavaFilePath() + "reports";
            File dir = new File(targetFilePath);
            if (!dir.exists()) dir.mkdirs();
            Files.move(
                    Paths.get("security-project" +
                            "/reports/ZapReport.html"),
                    Paths.get(targetFilePath + "/ZapReport.html")
            );
            Files.move(
                    Paths.get("security-project" +
                            "/reports/ZapReport.json"),
                    Paths.get(targetFilePath + "/ZapReport.json")
            );
            Files.move(
                    Paths.get("security-project" +
                            "/target/surefire-reports/emailable-report.html"),
                    Paths.get(targetFilePath + "/emailable-report.html")
            );
            Files.move(
                    Paths.get("security-project" +
                            "/target/surefire-reports/testng-results.xml"),
                    Paths.get(targetFilePath + "/testng-results.xml")
            );
            return 0;
        } catch (IOException e) {
            System.out.println("IOException : ");
            e.printStackTrace();
            return 1;
        }
    }

    public void simulateProgress (Scan scan, Consumer<Float> progressListener) {

        while (PropertiesFile.isScanningAnotherApp() == 0)
            sleep();

        int STEPS = 35;
        if(scan.getZapOptions().contains("Crawling"))
            STEPS += 14;
        if(scan.getZapOptions().contains("Passive Scanning"))
            STEPS += 14;
        if(scan.getZapOptions().contains("Active Scanning"))
            STEPS += 18*60;
        if(scan.getZapOptions().contains("AJAX Spidering"))
            STEPS += 10;
        for (int i = 1; i <= STEPS; i++) {
            sleep();
            float processedPercentage = (float) i / STEPS;

            if(processedPercentage>0.95
                    || scan.getStatus().equals(Scan.Status.ABORTED)
                        || scan.getStatus().equals(Scan.Status.FINISHED))
                break;
            else
                progressListener.accept(processedPercentage); // notify progress listener
        }
    }

    private void sleep() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    @PostConstruct
    public void populateTestData() {

        if (scanRepository.count() == 0) {
            Scan scan_1 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/1/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 18, 41, 6),
                    (long) 3
            );
            save(scan_1);
            Scan scan_2 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/2/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 18, 47, 1),
                    (long) 3
            );
            save(scan_2);
            Scan scan_3 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/3/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 22, 16, 50, 10),
                    (long) 3
            );
            save(scan_3);
            Scan scan_4 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/4/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, Ajax Spidering]",
                    Scan.Status.ABORTED,
                    LocalDateTime.of(2020, Month.MAY, 22, 16, 53, 36),
                    (long) 3
            );
            save(scan_4);
            Scan scan_5 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/5/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 18, 56, 22),
                    (long) 3
            );
            save(scan_5);
            Scan scan_6 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/6/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 18, 58, 32),
                    (long) 3
            );
            save(scan_6);
            Scan scan_7 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/7/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 19, 0, 8),
                    (long) 3
            );
            save(scan_7);
            Scan scan_8 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/8/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 19, 8, 32),
                    (long) 3
            );
            save(scan_8);
            Scan scan_9 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/9/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 19, 10, 36),
                    (long) 3
            );
            save(scan_9);
            Scan scan_10 = new Scan(
                    "http://192.168.60.128/bodgeit/",
                    "src/main/resources/javaFiles/3/10/",
                    "BodgeItStoreSuite.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 25, 19, 18, 46),
                    (long) 3
            );
            save(scan_10);
            Scan scan_11 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/11/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 9, 22, 45),
                    (long) 2
            );
            save(scan_11);
            Scan scan_12 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/12/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 9, 26, 20),
                    (long) 2
            );
            save(scan_12);
            Scan scan_13 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/13/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.ABORTED,
                    LocalDateTime.of(2020, Month.MAY, 26, 9, 30, 37),
                    (long) 2
            );
            save(scan_13);
            Scan scan_14 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/14/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.ABORTED,
                    LocalDateTime.of(2020, Month.MAY, 26, 9, 32, 24),
                    (long) 2
            );
            save(scan_14);
            Scan scan_15 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/15/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering, Passive Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 9, 34, 29),
                    (long) 2
            );
            save(scan_15);
            Scan scan_16 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/16/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Chrome,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 10, 4, 16),
                    (long) 2
            );
            save(scan_16);
            Scan scan_17 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/17/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.OFF,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 10, 8, 8),
                    (long) 2
            );
            save(scan_17);
            Scan scan_18 = new Scan(
                    "http://web-dvwa/",
                    "src/main/resources/javaFiles/2/18/",
                    "DVWASuiteDocker.java",
                    Scan.BrowserType.Firefox,
                    Scan.BrowserMode.ON,
                    "[Crawling, AJAX Spidering, Passive Scanning, Active Scanning]",
                    Scan.Status.FINISHED,
                    LocalDateTime.of(2020, Month.MAY, 26, 10, 11, 35),
                    (long) 2
            );
            save(scan_18);
        }
    }
}
