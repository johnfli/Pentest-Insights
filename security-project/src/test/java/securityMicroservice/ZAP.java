package securityMicroservice;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Proxy;
import org.zaproxy.clientapi.core.ApiResponse;
import org.zaproxy.clientapi.core.ApiResponseElement;
import org.zaproxy.clientapi.core.ApiResponseList;
import org.zaproxy.clientapi.core.ApiResponseSet;
import org.zaproxy.clientapi.core.ClientApi;
import org.zaproxy.clientapi.core.ClientApiException;

/**
 * Using the API to Spider and Active Scan a site and then retrieve
 * and print out the alerts.
 *
 * ZAP must be running on the specified host and port for this script to work
 */
public class ZAP {

	private static String TARGET = null;
	public static String os;

	public static String zapHostIp;
	public static String zapHostPort;
	public static String zapApiKey;
	public static String zapInstallationPath;

	public static boolean daemonModeEnabled;
	public static boolean apiKeyEnabled;
	public static boolean ajaxSpiderEnabled;
	public static boolean spiderEnabled;
	public static boolean passiveScanEnabled;
	public static boolean activeScanEnabled;
	public static boolean htmlReportEnabled;
	public static boolean jsonReportEnabled;

	private static ClientApi api;
	private static ApiResponse resp;
	private static String scanid;
	private static int progress;

	private static Logger logger = LogManager.getLogger(ZAP.class);

	public static void getClientAPI() {
		logger.info("  -- Creating ClientApi object");
		try {

			if(apiKeyEnabled)
				api = new ClientApi(zapHostIp, Integer.parseInt(zapHostPort), zapApiKey);  
			else
				api = new ClientApi(zapHostIp, Integer.parseInt(zapHostPort));     

			logger.info("   -- Waiting for successful connection to ZAP");
			api.waitForSuccessfulConnectionToZap(10000);
			logger.info("   -- Successful connection to ZAP sustained");			
		} catch (ClientApiException e) {
			logger.info("Problem Creating ZAP ClientApi object  : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void startZAP(String test_website_url) {
		TARGET = test_website_url;
		String zapExecutableLocation;
		os = System.getProperty("os.name").toLowerCase();
		if(os.contains("win")) {
			logger.info(" --: Windows OS detected :--");
			zapExecutableLocation = zapInstallationPath + "/zap.bat";
		} else if((os.contains("mac"))||(os.contains("linux"))) {
			logger.info(" --: Mac/Linux OS detected :--");
			zapExecutableLocation = zapInstallationPath + "/zap.sh";
			logger.info("ZAP api key : " + zapApiKey);
			ProcessBuilder pb;
			if(daemonModeEnabled && apiKeyEnabled)
				pb = new ProcessBuilder(zapExecutableLocation, "-config api.key=", zapApiKey, "-daemon", "-host", zapHostIp, "-port", zapHostPort);
			else if(daemonModeEnabled && !apiKeyEnabled)
				pb = new ProcessBuilder(zapExecutableLocation, "-config", "api.disablekey=true", "-daemon", "-host", zapHostIp, "-port", zapHostPort);
			else if(!daemonModeEnabled && apiKeyEnabled)
				pb = new ProcessBuilder(zapExecutableLocation, "-config", "api.disablekey=true", "-host", zapHostIp, "-port", zapHostPort);
			else
				pb = new ProcessBuilder(zapExecutableLocation, "-config api.key=", zapApiKey, "-host", zapHostIp, "-port", zapHostPort);

			pb.directory(new File(zapInstallationPath).getAbsoluteFile());
			logger.info("Trying to invoke the ZAP executable");

			try {

				pb.start();
				// Give ZAP the time to startup
				Thread.sleep(30000);
				logger.info("ZAP Started...");
			} catch (Exception e) {
				logger.info("Problem opening ZAP  :  " + e.getMessage());
			}
		} else {
			logger.fatal(" --: No OS detected :--");
		}

		try {
			getClientAPI();
			logger.info(" -- Creating new ZAP session ...");
			api.core.newSession(null, null);
			api.core.clearExcludedFromProxy();
			api.core.excludeFromProxy("^(?:(?!" + test_website_url + ").*).$"); // http:\\/\\/192.168.195.128\\/bodgeit\\/
			logger.info(" -- Created new ZAP session ...");

			logger.info(" -- Excluding URLs from current context ...");
			api.context.newContext("New Context");
			api.context.excludeFromContext("New Context", "^(?:(?!" + test_website_url + ").*).$");
			api.context.removeContext("Default Context");
			logger.info(" -- DONE excluding URLs from current context ...");

		} catch (Exception e) {
			logger.error("Problem connecting to ZAP  :  " + e.getMessage());
		}
	}	

	public static void stopZAP() {
		if( !(os.contains("win"))) {
			try {
				api.core.shutdown();
			} catch (ClientApiException e) {
				logger.info("Problem shutting ZAP  :  " + e.getMessage());
			}
		}
	}

	public static Proxy getProxyConfiguration() {

		// Set proxy 
		String proxyAddress = zapHostIp + ":" + zapHostPort; 
		Proxy proxy = new Proxy(); 
		proxy.setHttpProxy(proxyAddress);
		proxy.setSslProxy(proxyAddress);

		return proxy;

	}

	public static void runSecurityScans() {

		if(ajaxSpiderEnabled)
			runAjaxSpider();
		if(spiderEnabled)
			runSpider();
		if(passiveScanEnabled)
			runPassiveScan();
		if(activeScanEnabled)
			runActiveScan();
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ R e p o r t i n g ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");	
		if(htmlReportEnabled)
			htmlScanReport();
		if(jsonReportEnabled)
			jsonScanReport();
		logger.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	public static void runAjaxSpider() {
		try {
			logger.info("Ajax Spider target : " + TARGET);
			api.ajaxSpider.scan(TARGET, null, null, null);
			String status;

			long startTime = System.currentTimeMillis();
			long timeout = TimeUnit.MINUTES.toMillis(2); // Two minutes in milliseconds
			// Loop until the AJAX spider has finished or the timeout has exceeded
			while (true) {
				Thread.sleep(2000);
				status = (((ApiResponseElement) api.ajaxSpider.status()).getValue());
				logger.info("AJAX Spider status : " + status);
				if (!("stopped".equals(status)) || (System.currentTimeMillis() - startTime) < timeout) {
					break;
				}
			}
			logger.info("Ajax Spider completed");
		} catch (Exception e) {
			logger.info("Exception : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void runSpider() {

		try {
			// Start Spidering the target
			logger.info("Spider : " + TARGET);
			// It's not necessary to pass the ZAP API key again, already set when creating the ClientApi.
			resp = api.spider.scan(TARGET, null, null, null, null);
			// The scan now returns a scan id to support concurrent scanning
			scanid = ((ApiResponseElement) resp).getValue();
			// Poll the status until it completes
			while (true) {
				Thread.sleep(1000);
				progress =
						Integer.parseInt(
								((ApiResponseElement) api.spider.status(scanid)).getValue());
				logger.info("Spider progress : " + progress + "%");
				if (progress >= 100) {
					break;
				}
			}
			logger.info("Spider completed");
			// Give the passive scanner a chance to complete
			Thread.sleep(2000);
		} catch (Exception e) {
			logger.info("Exception : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void runPassiveScan() {
		// Start Passive Scanning the target
		logger.info("Passive Scan : " + TARGET);
		int recordsToScan;	
		try {
			do {
				Thread.sleep(500);
				recordsToScan = Integer.parseInt(((ApiResponseElement) api.pscan.recordsToScan()).getValue());
				logger.info("There is still " + recordsToScan + " records to scan");
			} while (recordsToScan != 0);
		} catch (Exception e) {
			logger.info("Problem in ZAP Passive Scan  : " + e.getMessage());
			e.printStackTrace();
		}
		logger.info("Passive scan completed");
	}


	public static void runActiveScan() {

		try {
			logger.info("Active Scan : " + TARGET);
			resp = api.ascan.scan(TARGET, "True", "False", null, null, null);
			// The scan now returns a scan id to support concurrent scanning
			scanid = ((ApiResponseElement) resp).getValue();
			// Poll the status until it completes
			while (true) {
				Thread.sleep(5000);
				progress =
						Integer.parseInt(
								((ApiResponseElement) api.ascan.status(scanid)).getValue());
				logger.info("Active Scan progress : " + progress + "%");
				if (progress >= 100) {
					break;
				}
			}
			logger.info("Active Scan completed");
		} catch (Exception e) {
			logger.info("Exception : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void htmlScanReport() {

		try {
			String result = new String(api.core.htmlreport());
			FileOutputStream fop;
			File file;
			String reportFileName = "reports/ZapReport.html";
			logger.info("Full scan report can be found in folder: " + reportFileName);
			file = new File(reportFileName);
			fop = new FileOutputStream(file);
			// if file doesn't exists, then create it     
			if (!file.exists()) {
				file.createNewFile();        
			}
			// get the content in bytes        
			byte[] contentInBytes = result.getBytes();
			fop.write(contentInBytes);
			fop.flush();
			fop.close();

		} catch (Exception e) {
			logger.info("Not able to retrieve HTML report from ZAP Security Tool");
			e.printStackTrace();
		}
	}	

	public static void jsonScanReport() {

		try {	
			File file;      
			FileOutputStream fop;
			String jsonFileName = "reports/ZapReport.json";
			logger.info("Full scan report can be found in folder: " + jsonFileName);
			file = new File(jsonFileName);     
			fop = new FileOutputStream(file);
			// if file doesn't exists, then create it     
			if (!file.exists()) {
				file.createNewFile();        
			}
			fop.write(api.core.jsonreport());       
			fop.flush();      
			fop.close();

		} catch (Exception e) {
			logger.info("Exception : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static boolean[] checkAlerts(String url) {
		boolean high 	= false;
		boolean med 	= false;
		boolean low 	= false;
		boolean info 	= false;
		try {
			// Retrieve the alerts using paging in case there are lots of them
			int start = 0;
			int count = 5000;
			int alertCount = 0;
			ApiResponse resp = api.alert.alerts(url, String.valueOf(start), String.valueOf(count), null);

			while (((ApiResponseList) resp).getItems().size() != 0) {
				System.out.println("Reading " + count + " alerts from " + start);
				alertCount += ((ApiResponseList) resp).getItems().size();

				for (ApiResponse l : (((ApiResponseList) resp).getItems())) {

					Map<String, ApiResponse> element = ((ApiResponseSet) l).getValuesMap();
					if ("Low".equals(element.get("risk").toString()))
						low = true;
					else if ("Medium".equals(element.get("risk").toString()))
						med = true;
					else if ("High".equals(element.get("risk").toString()))
						high = true;
					else if ("Informational".equals(element.get("risk").toString()))
						info = true;
					else
						System.err.println("Problem with Risk Level inside checkAlerts().");
				}
				start += count;
				resp = api.alert.alerts(url, String.valueOf(start), String.valueOf(count), null);
			}
			System.out.println("Total number of Alerts: " + alertCount);
		} catch (Exception e) {
			System.out.println("Exception : " + e.getMessage());
			e.printStackTrace();
		}
		return new boolean[]{high, med, low, info};
	}
}