package securityMicroservice;

import java.io.FileInputStream;
import java.util.Properties;

public class PropertiesFile {
	
	private static Properties prop = new Properties();

	public static void readPropertiesFile() {
		try {
			FileInputStream inputStream = new FileInputStream("src/test/java/securityMicroservice/config.properties");
			prop.load(inputStream);
			inputStream.close();

			// Input Browser Type
			WebDrivers.browserName = prop.getProperty("browser");
			// Input if Headless or not
			String mode = prop.getProperty("headlessEnabled");
			if (mode.equalsIgnoreCase("ON")) WebDrivers.headlessMode = true;
			else WebDrivers.headlessMode = false;
			// Input ZAP configuration settings
			ZAP.zapHostIp = prop.getProperty("ZAP_HOST_IP");
			ZAP.zapHostPort = prop.getProperty("ZAP_HOST_PORT");

			String os = System.getProperty("os.name").toLowerCase();
			if( !(os.contains("win"))) {
				ZAP.zapApiKey = prop.getProperty("LINUX_ZAP_API_KEY");
				ZAP.zapInstallationPath = prop.getProperty("LINUX_ZAP_INSTALLATION_PATH");
			} else {					
				ZAP.zapApiKey = prop.getProperty("WIN_ZAP_API_KEY");
				ZAP.zapInstallationPath = prop.getProperty("WIN_ZAP_INSTALLATION_PATH");	
			}
			// Input ZAP options to run
			mode = prop.getProperty("daemonModeEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.daemonModeEnabled = true;
			else ZAP.daemonModeEnabled = false;

			mode = prop.getProperty("apiKeyEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.apiKeyEnabled = true;
			else ZAP.apiKeyEnabled = false;
			
			mode = prop.getProperty("ajaxSpiderEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.ajaxSpiderEnabled = true;
			else ZAP.ajaxSpiderEnabled = false;

			mode = prop.getProperty("spiderEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.spiderEnabled = true;
			else ZAP.spiderEnabled = false;
			
			mode = prop.getProperty("passiveScanEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.passiveScanEnabled = true;
			else ZAP.passiveScanEnabled = false;
			
			mode = prop.getProperty("activeScanEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.activeScanEnabled = true;
			else ZAP.activeScanEnabled = false;

			mode = prop.getProperty("htmlReportEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.htmlReportEnabled = true;
			else ZAP.htmlReportEnabled = false;

			mode = prop.getProperty("jsonReportEnabled");
			if (mode.equalsIgnoreCase("ON")) ZAP.jsonReportEnabled = true;
			else ZAP.jsonReportEnabled = false;
			
		} catch (Exception e) {
			System.out.println("Problem reading config.properties file: " + e);
			e.printStackTrace();
		}
		
	}

}
