package securityMicroservice;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.remote.RemoteWebDriver;

public class WebDrivers {

	public static String browserName;
	public static boolean headlessMode;
	public static WebDriver driver;
    private static final Logger logger = LogManager.getLogger(WebDrivers.class);
    private static final boolean runningInsideDocker = isRunningInsideDocker();

	public static WebDriver getWebDriver() {

		if (browserName.equalsIgnoreCase(BrowserType.CHROME) ) {

			logger.info("Starting Chrome Browser...");
			// If the app is running inside a Docker Container then the browser will be created on the
			// Selenium Grid Docker Container, otherwise from Boni Garcia's WebDriverManager
			if (runningInsideDocker) {
				logger.info(" -- Running tests inside Docker container");
				try {
					driver = new RemoteWebDriver(new URL("http://selenium-hub:4444/wd/hub"), chromeConfiguration(headlessMode));
				} catch (MalformedURLException e) {
					System.out.println(" -- MalformedURLException inside WebDrivers.getWebDriver : ");
					e.printStackTrace();
				}

			} else {
				// Setup the Chrome Driver from Boni Garcia's WebDriverManager
				WebDriverManager.chromedriver().setup();
				// Create a new Chrome Driver with the Proxy Configurations need to run through ZAP
				driver = new ChromeDriver(chromeConfiguration(headlessMode));
			}
		} else if (browserName.equalsIgnoreCase(BrowserType.FIREFOX)) {

			logger.info("Starting Firefox Browser...");
			// If the app is running inside a Docker Container then the browser will be created on the
			// Selenium Grid Docker Container, otherwise from Boni Garcia's WebDriverManager
			if (runningInsideDocker) {
				logger.info(" -- Running tests inside Docker container");
				try {
					driver = new RemoteWebDriver(new URL("http://selenium-hub:4444/wd/hub"), firefoxConfiguration(headlessMode));
				} catch (MalformedURLException e) {
					System.out.println(" -- MalformedURLException inside WebDrivers.getWebDriver : ");
					e.printStackTrace();
				}
			} else {
				// Setup the Firefox Driver from Boni Garcia's WebDriverManager
				WebDriverManager.firefoxdriver().setup();
				driver = new FirefoxDriver(firefoxConfiguration(headlessMode));
			}
		} else if (browserName.equalsIgnoreCase(BrowserType.EDGE)) {

			logger.info("Starting Edge Browser...");
			// Setup the Edge Driver from Boni Garcia's WebDriverManager
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver(edgeConfiguration(headlessMode));

		} else if (browserName.equalsIgnoreCase(BrowserType.IE)) {

			logger.info("Starting Internet Explorer Browser...");
			// Setup the Internet Explorer Driver from Boni Garcia's WebDriverManager
			WebDriverManager.iedriver().setup();
			driver = new InternetExplorerDriver(ieConfiguration(headlessMode));
		}
		// Set the timeout duration to 30 seconds
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		// Return the configured Web Driver
		return driver;
	}

	public static DesiredCapabilities getDesiredCapabilities(Proxy proxy) {
		//Create the Desired Capabilities object
		DesiredCapabilities capabilities = new DesiredCapabilities();
		// Set the Desired Capabilities accordingly for ZAP
		capabilities.setCapability(CapabilityType.PROXY, proxy);
		capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
		capabilities.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);
		// Return the configured Desired Capabilities
		return capabilities;

	}

	public static ChromeOptions chromeConfiguration(boolean headless) {
		// Set Chrome Options
		ChromeOptions chromeOptions = new ChromeOptions(); 
		chromeOptions.addArguments("--ignore-certificate-errors");
		// Enable headless mode if requested
		if (headless)
			chromeOptions.addArguments("--headless --hide-scrollbars --disable-gpu");
		// Merge Chrome Options with desired capabilities
		chromeOptions.merge(getDesiredCapabilities(ZAP.getProxyConfiguration()));
		// Return the configured Chrome Options
		return chromeOptions;
	}

	public static FirefoxOptions firefoxConfiguration(boolean headless) {
		// Set Firefox Options
		FirefoxOptions options = new FirefoxOptions();
		// Enable headless mode if requested
		options.setHeadless(headless);
		// Merge Firefox Options with desired capabilities
		options.merge(getDesiredCapabilities(ZAP.getProxyConfiguration()));
		// Return the configured Firefox Options
		return options;
	}

	public static EdgeOptions edgeConfiguration(boolean headless) {
		// Set Edge Options
		EdgeOptions options = new EdgeOptions();
		// Edge does not support headless mode
		if (headless)
			logger.info("CAUTION: Edge does not support headless mode. Running on GUI mode.");
		// Merge Edge options with desired capabilities
		options.merge(getDesiredCapabilities(ZAP.getProxyConfiguration()));
		// Return the configured Edge Options
		return options;
	}

	public static InternetExplorerOptions ieConfiguration(boolean headless) {
		// Set IE Options
		InternetExplorerOptions options = new InternetExplorerOptions();
		if (headless)
			logger.info("CAUTION: IE does not support headless mode. Running on GUI mode.");
		// Merge IE options with desired capabilities
		options.merge(getDesiredCapabilities(ZAP.getProxyConfiguration()));
		// Return the configured IE options
		return options;
	}

	public static boolean isRunningInsideDocker() {
	    try (Stream< String > stream =
	        Files.lines(Paths.get("/proc/1/cgroup"))) {
	        return stream.anyMatch(line -> line.contains("docker"));
	    } catch (IOException e) {
	        return false;
	    }
	}
}
